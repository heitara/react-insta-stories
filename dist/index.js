!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("react")):"function"==typeof define&&define.amd?define("Stories",["React"],t):"object"==typeof exports?exports.Stories=t(require("react")):e.Stories=t(e.React)}(this,(function(e){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=7)}([function(t,r){t.exports=e},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.initialContext=void 0;var i=n(r(0));t.initialContext={defaultInterval:4e3,width:360,height:640};var o=i.default.createContext(t.initialContext);t.default=o},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.initialContext=void 0;var i=n(r(0));t.initialContext={stories:[]};var o=i.default.createContext(t.initialContext);t.default=o},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(r(0));t.default=i.default.createContext({currentId:0,videoDuration:0,bufferAction:!1,pause:!1,isStatic:!1,next:function(){}})},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=i(r(0)),a=i(r(17));t.default=function(e){var t=e.story,r=e.globalHeader,i=e.children;return o.default.createElement(o.default.Fragment,null,i,t.header&&o.default.createElement("div",{style:{position:"absolute",left:12,top:20,zIndex:19}},"object"===n(t)?r?r(t.header):o.default.createElement(a.default,{heading:t.header.heading,subheading:t.header.subheading,profileImage:t.header.profileImage}):null))}},function(e,t,r){"use strict";function n(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var r=[],n=!0,i=!1,o=void 0;try{for(var a,u=e[Symbol.iterator]();!(n=(a=u.next()).done)&&(r.push(a.value),!t||r.length!==t);n=!0);}catch(e){i=!0,o=e}finally{try{n||null==u.return||u.return()}finally{if(i)throw o}}return r}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return i(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return i(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var o=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&o(t,e,r);return a(t,e),t},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var c=u(r(0)),f=l(r(18));t.default=function(e){var t=e.story,r=e.action,i=e.customCollapsed,o=e.children,a=n(c.useState(!1),2),u=a[0],l=a[1],s=f.default;return c.default.createElement(c.default.Fragment,null,o,t.seeMore&&c.default.createElement("div",{style:{position:"absolute",margin:"auto",bottom:u?"unset":0,zIndex:9999,width:"100%",height:u?"100%":"auto"}},c.default.createElement(s,{action:r,toggleMore:function(e){r(e?"pause":"play"),l(e)},showContent:u,seeMoreContent:t.seeMore,customCollapsed:i||t.seeMoreCollapsed})))}},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(r(0)),o=n(r(16));t.default=function(){return i.default.createElement(o.default,null)}},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var r=[],n=!0,i=!1,o=void 0;try{for(var a,u=e[Symbol.iterator]();!(n=(a=u.next()).done)&&(r.push(a.value),!t||r.length!==t);n=!0);}catch(e){i=!0,o=e}finally{try{n||null==u.return||u.return()}finally{if(i)throw o}}return r}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return o(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var a=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),u=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&a(t,e,r);return u(t,e),t},c=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.WithSeeMore=t.WithHeader=void 0;var f=l(r(0)),s=c(r(8)),d=c(r(1)),y=c(r(2)),p=r(13),h=r(14),m=c(r(4)),v=c(r(5)),b=function(e){var t=e.renderers?e.renderers.concat(h.renderers):h.renderers,r={width:e.width,height:e.height,loader:e.loader,header:e.header,storyContainerStyles:e.storyContainerStyles,storyStyles:e.storyStyles,loop:e.loop,defaultInterval:e.defaultInterval,isPaused:e.isPaused,currentIndex:e.currentIndex,onStoryStart:e.onStoryStart,onStoryEnd:e.onStoryEnd,onAllStoriesEnd:e.onAllStoriesEnd,keyboardNavigation:e.keyboardNavigation,preventDefault:e.preventDefault,isStatic:e.isStatic},n=i(f.useState({stories:g(e.stories,t)}),2),o=n[0],a=n[1];return f.useEffect((function(){a({stories:g(e.stories,t)})}),[e.stories,e.renderers]),f.default.createElement(d.default.Provider,{value:r},f.default.createElement(y.default.Provider,{value:o},f.default.createElement(s.default,null)))},g=function(e,t){return e.map((function(e){var r={};"string"==typeof e?(r.url=e,r.type="image"):"object"===n(e)&&(r=Object.assign(r,e));var i=p.getRenderer(r,t);return r.originalContent=r.content,r.content=i,r}))};b.defaultProps={width:360,height:640,defaultInterval:4e3},t.WithHeader=m.default,t.WithSeeMore=v.default,t.default=b},function(e,t,r){"use strict";function n(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var r=[],n=!0,i=!1,o=void 0;try{for(var a,u=e[Symbol.iterator]();!(n=(a=u.next()).done)&&(r.push(a.value),!t||r.length!==t);n=!0);}catch(e){i=!0,o=e}finally{try{n||null==u.return||u.return()}finally{if(i)throw o}}return r}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return i(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return i(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var o=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&o(t,e,r);return a(t,e),t},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var c=u(r(0)),f=l(r(1)),s=l(r(2)),d=l(r(3)),y=l(r(9)),p=l(r(10));t.default=function(){var e=n(c.useState(0),2),t=e[0],r=e[1],i=n(c.useState(!0),2),o=i[0],a=i[1],u=n(c.useState(!0),2),l=u[0],m=u[1],v=n(c.useState(0),2),b=v[0],g=v[1],_=c.useRef(),O=c.useRef(!0),j=c.useContext(f.default),S=j.width,w=j.height,x=j.loop,M=j.currentIndex,E=j.isStatic,P=j.isPaused,A=j.keyboardNavigation,C=j.preventDefault,I=j.storyContainerStyles,D=void 0===I?{}:I,k=c.useContext(s.default).stories;c.useEffect((function(){"number"==typeof M&&(M>=0&&M<k.length?z((function(){return M})):console.error("Index out of bounds. Current index was set to value more than the length of stories array.",M))}),[M]),c.useEffect((function(){"boolean"==typeof P&&a(P)}),[P]),c.useEffect((function(){if("undefined"!=typeof window&&window.document&&"boolean"==typeof A&&A)return document.addEventListener("keydown",T),function(){document.removeEventListener("keydown",T)}}),[A]),c.useEffect((function(){return function(){O.current=!1}}),[]);var T=function(e){"ArrowLeft"===e.key?B():"ArrowRight"===e.key&&W()},R=function(e,t){E||a("pause"===e),m(!!t)},z=function(e){r(e),E||R("pause",!0)},B=function(){z((function(e){return e>0?e-1:e}))},W=function(){O.current&&(x?U():H())},U=function(){z((function(e){return(e+1)%k.length}))},H=function(){z((function(e){return e<k.length-1?e+1:e}))},N=function(e){e.preventDefault(),_.current=setTimeout((function(){R("pause")}),200)},V=function(e){return function(t){t.preventDefault(),_.current&&clearTimeout(_.current),o?R("play"):"next"===e?W():B()}};return c.default.createElement("div",{style:Object.assign(Object.assign(Object.assign({},h.container),D),{width:S,height:w})},c.default.createElement(d.default.Provider,{value:{bufferAction:l,videoDuration:b,currentId:t,pause:o,next:W,isStatic:E}},c.default.createElement(p.default,null)),c.default.createElement(y.default,{action:R,bufferAction:l,playState:o,story:k[t],getVideoDuration:function(e){g(1e3*e)}}),!C&&c.default.createElement("div",{style:h.overlay},c.default.createElement("div",{style:{width:"50%",zIndex:999},onTouchStart:N,onTouchEnd:V("previous"),onMouseDown:N,onMouseUp:V("previous")}),c.default.createElement("div",{style:{width:"50%",zIndex:999},onTouchStart:N,onTouchEnd:V("next"),onMouseDown:N,onMouseUp:V("next")})))};var h={container:{display:"flex",flexDirection:"column",background:"#111",position:"relative"},overlay:{position:"absolute",height:"inherit",width:"inherit",display:"flex"}}},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&n(t,e,r);return i(t,e),t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var u=o(r(0)),l=a(r(1)),c={story:{display:"flex",position:"relative",overflow:"hidden",alignItems:"center"},storyContent:{width:"auto",maxWidth:"100%",maxHeight:"100%",margin:"auto"}};t.default=function(e){var t,r,n=u.useContext(l.default),i=n.width,o=n.height,a=n.loader,f=n.header,s=n.storyStyles,d=function(t,r){switch(t){case"UPDATE_VIDEO_DURATION":return e.getVideoDuration(r.duration),{ack:"OK"}}};return u.default.createElement("div",{style:Object.assign(Object.assign({},c.story),{width:i,height:o})},(t=e.story.content,r={width:i,height:o,loader:a,header:f,storyStyles:s},u.default.createElement(t,{action:e.action,isPaused:e.playState,story:e.story,config:r,messageHandler:d})))}},function(e,t,r){"use strict";function n(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var r=[],n=!0,i=!1,o=void 0;try{for(var a,u=e[Symbol.iterator]();!(n=(a=u.next()).done)&&(r.push(a.value),!t||r.length!==t);n=!0);}catch(e){i=!0,o=e}finally{try{n||null==u.return||u.return()}finally{if(i)throw o}}return r}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return i(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return i(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var o=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&o(t,e,r);return a(t,e),t},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var c=u(r(0)),f=l(r(11)),s=l(r(3)),d=l(r(1)),y=l(r(2));t.default=function(){var e=n(c.useState(0),2),t=e[0],r=e[1],i=c.useContext(s.default),o=i.currentId,a=i.next,u=i.videoDuration,l=i.pause,h=i.isStatic,m=c.useContext(d.default),v=m.defaultInterval,b=m.onStoryEnd,g=m.onStoryStart,_=m.onAllStoriesEnd,O=c.useContext(y.default).stories;c.useEffect((function(){r(0)}),[o,O]),c.useEffect((function(){return l||(j.current=requestAnimationFrame(w)),function(){cancelAnimationFrame(j.current)}}),[o,l]);var j=c.useRef(),S=t,w=function e(){0===S&&x(),r((function(e){var t=P();return S=e+100/(t/1e3*60),e+100/(t/1e3*60)})),S<100?j.current=requestAnimationFrame(e):(M(),o===O.length-1&&E(),cancelAnimationFrame(j.current),a())},x=function(){g&&g(o,O[o])},M=function(){b&&b(o,O[o])},E=function(){_&&_(o,O)},P=function(){return"video"===O[o].type?u:"number"==typeof O[o].duration?O[o].duration:v};return c.default.createElement("div",{style:p.progressArr},O.map((function(e,r){return c.default.createElement(f.default,{key:r,count:t,width:1/O.length,active:r===o?h?2:1:r<o?2:0})})))};var p={progressArr:{display:"flex",justifyContent:"center",maxWidth:"100%",flexWrap:"row",position:"absolute",width:"98%",padding:5,paddingTop:7,alignSelf:"center",zIndex:1001,filter:"drop-shadow(0 1px 8px #222)"}}},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&n(t,e,r);return i(t,e),t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var u=o(r(0)),l=a(r(12)),c=a(r(3));t.default=function(e){var t=u.useContext(c.default),r=t.bufferAction,n=t.pause,i=t.isStatic,o=e.width,a=e.active;return u.default.createElement(l.default,{width:o,pause:n,bufferAction:r,isStatic:i},u.default.createElement("div",{style:Object.assign(Object.assign({},function(t){switch(t.active){case 2:return{width:"100%"};case 1:return{transform:"scaleX(".concat(e.count/100,")")};case 0:default:return{width:0}}}({active:a})),f.inner)}))};var f={inner:{background:"#fff",height:"100%",maxWidth:"100%",borderRadius:2,transformOrigin:"center left",WebkitBackfaceVisibility:"hidden",MozBackfaceVisibility:"hidden",msBackfaceVisibility:"hidden",backfaceVisibility:"hidden",WebkitPerspective:1e3,MozPerspective:1e3,msPerspective:1e3,perspective:1e3}}},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(r(0)),o=function(e){var t=e.width,r=e.pause,n=e.bufferAction,i=e.isStatic;return{width:"".concat(100*t,"%"),opacity:!r||n||i?1:0}},a={progress:{height:2,maxWidth:"100%",background:"#555",margin:2,borderRadius:2,transition:"opacity 400ms ease-in-out"}};t.default=function(e){return i.default.createElement("div",{style:Object.assign(Object.assign({},a.progress),o(e))},e.children)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getRenderer=void 0,t.getRenderer=function(e,t){var r=t.map((function(t){return Object.assign(Object.assign({},t),{testerResult:t.tester(e)})})).filter((function(e){return e.testerResult.condition}));return r.sort((function(e,t){return t.testerResult.priority-e.testerResult.priority})),r[0].renderer}},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.renderers=void 0;var i=n(r(15)),o=n(r(19)),a=n(r(20)),u=n(r(21));t.renderers=[i.default,o.default,u.default,a.default]},function(e,t,r){"use strict";function n(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var r=[],n=!0,i=!1,o=void 0;try{for(var a,u=e[Symbol.iterator]();!(n=(a=u.next()).done)&&(r.push(a.value),!t||r.length!==t);n=!0);}catch(e){i=!0,o=e}finally{try{n||null==u.return||u.return()}finally{if(i)throw o}}return r}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return i(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return i(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var o=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&o(t,e,r);return a(t,e),t},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.tester=t.renderer=void 0;var c=u(r(0)),f=l(r(6)),s=l(r(4)),d=l(r(5));t.renderer=function(e){var t=e.story,r=e.action,i=(e.isPaused,e.config),o=n(c.useState(!1),2),a=o[0],u=o[1],l=i.width,p=i.height,h=i.loader,m=i.storyStyles,v=Object.assign(Object.assign({},y.storyContent),m||{});return c.createElement(s.default,{story:t,globalHeader:i.header},c.createElement(d.default,{story:t,action:r},c.createElement("div",null,c.createElement("img",{style:v,src:t.url,onLoad:function(){u(!0),r("play")}}),!a&&c.createElement("div",{style:{width:l,height:p,position:"absolute",left:0,top:0,background:"rgba(0, 0, 0, 0.9)",zIndex:9,display:"flex",justifyContent:"center",alignItems:"center",color:"#ccc"}},h||c.createElement(f.default,null)))))};var y={story:{display:"flex",position:"relative",overflow:"hidden"},storyContent:{width:"auto",maxWidth:"100%",maxHeight:"100%",margin:"auto"}};t.tester=function(e){return{condition:!(e.content||e.type&&"image"!==e.type),priority:2}},t.default={renderer:t.renderer,tester:t.tester}},function(e,t,r){"use strict";r.r(t);var n=r(0),i=r.n(n);function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}function a(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}t.default=function(e){e.styles;var t=a(e,["styles"]);return i.a.createElement("svg",o({width:"44",height:"44",xmlns:"http://www.w3.org/2000/svg",stroke:"#fff"},t),i.a.createElement("g",{fill:"none",fillRule:"evenodd",strokeWidth:"2"},i.a.createElement("circle",{cx:"22",cy:"22",r:"1"},i.a.createElement("animate",{attributeName:"r",begin:"0s",dur:"1.8s",values:"1; 20",calcMode:"spline",keyTimes:"0; 1",keySplines:"0.165, 0.84, 0.44, 1",repeatCount:"indefinite"}),i.a.createElement("animate",{attributeName:"stroke-opacity",begin:"0s",dur:"1.8s",values:"1; 0",calcMode:"spline",keyTimes:"0; 1",keySplines:"0.3, 0.61, 0.355, 1",repeatCount:"indefinite"})),i.a.createElement("circle",{cx:"22",cy:"22",r:"1"},i.a.createElement("animate",{attributeName:"r",begin:"-0.9s",dur:"1.8s",values:"1; 20",calcMode:"spline",keyTimes:"0; 1",keySplines:"0.165, 0.84, 0.44, 1",repeatCount:"indefinite"}),i.a.createElement("animate",{attributeName:"stroke-opacity",begin:"-0.9s",dur:"1.8s",values:"1; 0",calcMode:"spline",keyTimes:"0; 1",keySplines:"0.3, 0.61, 0.355, 1",repeatCount:"indefinite"}))))}},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(r(0)),o={main:{display:"flex",alignItems:"center"},img:{width:40,height:40,borderRadius:40,marginRight:10,filter:"drop-shadow(0 0px 2px rgba(0, 0, 0, 0.5))",border:"2px solid rgba(255, 255, 255, 0.8)"},text:{display:"flex",flexDirection:"column",filter:"drop-shadow(0 0px 3px rgba(0, 0, 0, 0.9))"},heading:{fontSize:"1rem",color:"rgba(255, 255, 255, 0.9)",margin:0,marginBottom:2},subheading:{fontSize:"0.6rem",color:"rgba(255, 255, 255, 0.8)",margin:0}};t.default=function(e){var t=e.profileImage,r=e.heading,n=e.subheading;return i.default.createElement("div",{style:o.main},t&&i.default.createElement("img",{style:o.img,src:t}),i.default.createElement("span",{style:o.text},i.default.createElement("p",{style:o.heading},r),i.default.createElement("p",{style:o.subheading},n)))}},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&n(t,e,r);return i(t,e),t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var u=o(r(0)),l=a(r(1));t.default=function(e){var t=e.seeMoreContent,r=e.customCollapsed,n=u.useContext(l.default).keyboardNavigation;u.useEffect((function(){if("undefined"!=typeof window&&window.document&&"boolean"==typeof n&&n)return document.addEventListener("keydown",i),function(){document.removeEventListener("keydown",i)}}),[n]);var i=function(t){"ArrowUp"===t.key?(t.preventDefault(),e.toggleMore(!0)):"ArrowDown"!==t.key&&"Escape"!==t.key||(t.preventDefault(),e.toggleMore(!1))};return e.showContent?u.default.createElement("div",{style:c.seeMoreExpanded},u.default.createElement(t,{close:function(){return e.toggleMore(!1)}})):r?u.default.createElement(r,{action:e.action,toggleMore:e.toggleMore}):u.default.createElement("div",{style:c.seeMore,onClick:function(t){t.preventDefault(),t.stopPropagation(),e.toggleMore(!0)}},u.default.createElement("span",{style:c.seeMoreIcon},"⌃"),u.default.createElement("span",{style:c.seeMoreText},"See more"))};var c={seeMore:{height:"10vh",background:"linear-gradient(rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.2))",display:"flex",flexDirection:"column",width:"100%",alignItems:"center",justifyContent:"flex-end",bottom:0},seeMoreExpanded:{position:"absolute",top:0,left:0,width:"100%",height:"100%",boxSizing:"border-box",zIndex:99999},seeMoreText:{color:"white",textAlign:"center",letterSpacing:"0.1em",marginBottom:"2.2vh",textTransform:"capitalize",opacity:"1",fontSize:"0.8em",transition:"opacity 300ms ease-in-out"},seeMoreIcon:{color:"white",textAlign:"center",letterSpacing:"0.2em",marginBottom:"0.4vh",opacity:"1",filter:"drop-shadow(0 0 5px black)",textTransform:"capitalize",transition:"opacity 300ms ease-in-out"},seeMoreClose:{position:"absolute",filter:"drop-shadow(0 3px 2px #ccc)",right:"0.5rem",top:"0.5rem",fontSize:"1.5rem",opacity:"0.7",padding:"1rem"}}},function(e,t,r){"use strict";function n(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var r=[],n=!0,i=!1,o=void 0;try{for(var a,u=e[Symbol.iterator]();!(n=(a=u.next()).done)&&(r.push(a.value),!t||r.length!==t);n=!0);}catch(e){i=!0,o=e}finally{try{n||null==u.return||u.return()}finally{if(i)throw o}}return r}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return i(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return i(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var o=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&o(t,e,r);return a(t,e),t},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.tester=t.renderer=void 0;var c=u(r(0)),f=l(r(6)),s=l(r(4)),d=l(r(5));t.renderer=function(e){var t=e.story,r=e.action,i=e.isPaused,o=e.config,a=e.messageHandler,u=n(c.useState(!1),2),l=u[0],p=u[1],h=n(c.useState(!1),2),m=h[0],v=h[1],b=o.width,g=o.height,_=o.loader,O=o.storyStyles,j=Object.assign(Object.assign({},y.storyContent),O||{}),S=c.useRef(null);c.useEffect((function(){S.current&&(i?S.current.pause():S.current.play().catch((function(){})))}),[i]);return c.createElement(s.default,{story:t,globalHeader:o.header},c.createElement(d.default,{story:t,action:r},c.createElement("div",{style:y.videoContainer},c.createElement("video",{ref:S,style:j,src:t.url,controls:!1,onLoadedData:function(){a("UPDATE_VIDEO_DURATION",{duration:S.current.duration}),p(!0),S.current.play().then((function(){r("play")})).catch((function(){v(!0),S.current.play().finally((function(){r("play")}))}))},playsInline:!0,onWaiting:function(){r("pause",!0)},onPlaying:function(){r("play",!0)},muted:m,autoPlay:!0,"webkit-playsinline":"true"}),!l&&c.createElement("div",{style:{width:b,height:g,position:"absolute",left:0,top:0,background:"rgba(0, 0, 0, 0.9)",zIndex:9,display:"flex",justifyContent:"center",alignItems:"center",color:"#ccc"}},_||c.createElement(f.default,null)))))};var y={storyContent:{width:"auto",maxWidth:"100%",maxHeight:"100%",margin:"auto"},videoContainer:{display:"flex",alignItems:"center",justifyContent:"center"}};t.tester=function(e){return{condition:"video"===e.type,priority:2}},t.default={renderer:t.renderer,tester:t.tester}},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&n(t,e,r);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.tester=t.renderer=void 0;var a=o(r(0));t.renderer=function(e){var t=e.story,r=e.action;return a.useEffect((function(){r("play")}),[t]),a.createElement("div",{style:u.storyContent},a.createElement("p",{style:u.text},"This story could not be loaded."))};var u={storyContent:{width:"100%",maxHeight:"100%",margin:"auto"},text:{textAlign:"center",color:"white",width:"90%",margin:"auto"}};t.tester=function(){return{condition:!0,priority:1}},t.default={renderer:t.renderer,tester:t.tester}},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&n(t,e,r);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.tester=t.renderer=void 0;var a=o(r(0));t.renderer=function(e){a.useEffect((function(){e.action("play")}),[e.story]);var t=e.story.originalContent;return a.createElement(t,Object.assign({},e))},t.tester=function(e){return{condition:!!e.content,priority:2}},t.default={renderer:t.renderer,tester:t.tester}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TdG9yaWVzL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9TdG9yaWVzL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL1N0b3JpZXMvZXh0ZXJuYWwge1wiY29tbW9uanNcIjpcInJlYWN0XCIsXCJjb21tb25qczJcIjpcInJlYWN0XCIsXCJhbWRcIjpcIlJlYWN0XCIsXCJyb290XCI6XCJSZWFjdFwifSIsIndlYnBhY2s6Ly9TdG9yaWVzLy4vc3JjL2NvbnRleHQvR2xvYmFsLnRzIiwid2VicGFjazovL1N0b3JpZXMvLi9zcmMvY29udGV4dC9TdG9yaWVzLnRzIiwid2VicGFjazovL1N0b3JpZXMvLi9zcmMvY29udGV4dC9Qcm9ncmVzcy50cyIsIndlYnBhY2s6Ly9TdG9yaWVzLy4vc3JjL3JlbmRlcmVycy93cmFwcGVycy93aXRoSGVhZGVyLnRzeCIsIndlYnBhY2s6Ly9TdG9yaWVzLy4vc3JjL3JlbmRlcmVycy93cmFwcGVycy93aXRoU2VlTW9yZS50c3giLCJ3ZWJwYWNrOi8vU3Rvcmllcy8uL3NyYy9jb21wb25lbnRzL1NwaW5uZXIudHN4Iiwid2VicGFjazovL1N0b3JpZXMvLi9zcmMvaW5kZXgudHN4Iiwid2VicGFjazovL1N0b3JpZXMvLi9zcmMvY29tcG9uZW50cy9Db250YWluZXIudHN4Iiwid2VicGFjazovL1N0b3JpZXMvLi9zcmMvY29tcG9uZW50cy9TdG9yeS50c3giLCJ3ZWJwYWNrOi8vU3Rvcmllcy8uL3NyYy9jb21wb25lbnRzL1Byb2dyZXNzQXJyYXkudHN4Iiwid2VicGFjazovL1N0b3JpZXMvLi9zcmMvY29tcG9uZW50cy9Qcm9ncmVzcy50c3giLCJ3ZWJwYWNrOi8vU3Rvcmllcy8uL3NyYy9jb21wb25lbnRzL1Byb2dyZXNzV3JhcHBlci50c3giLCJ3ZWJwYWNrOi8vU3Rvcmllcy8uL3NyYy91dGlsL3JlbmRlcmVycy50c3giLCJ3ZWJwYWNrOi8vU3Rvcmllcy8uL3NyYy9yZW5kZXJlcnMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vU3Rvcmllcy8uL3NyYy9yZW5kZXJlcnMvSW1hZ2UudHN4Iiwid2VicGFjazovL1N0b3JpZXMvLi9zcmMvYXNzZXRzL3B1ZmYuc3ZnIiwid2VicGFjazovL1N0b3JpZXMvLi9zcmMvY29tcG9uZW50cy9IZWFkZXIudHN4Iiwid2VicGFjazovL1N0b3JpZXMvLi9zcmMvY29tcG9uZW50cy9TZWVNb3JlLnRzeCIsIndlYnBhY2s6Ly9TdG9yaWVzLy4vc3JjL3JlbmRlcmVycy9WaWRlby50c3giLCJ3ZWJwYWNrOi8vU3Rvcmllcy8uL3NyYy9yZW5kZXJlcnMvRGVmYXVsdC50c3giLCJ3ZWJwYWNrOi8vU3Rvcmllcy8uL3NyYy9yZW5kZXJlcnMvQXV0b1BsYXlDb250ZW50LnRzeCJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJyZXF1aXJlIiwiZGVmaW5lIiwiYW1kIiwidGhpcyIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzBfXyIsImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJpbml0aWFsQ29udGV4dCIsImRlZmF1bHRJbnRlcnZhbCIsIndpZHRoIiwiaGVpZ2h0IiwiR2xvYmFsQ29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJzdG9yaWVzIiwiU3Rvcmllc0NvbnRleHQiLCJjdXJyZW50SWQiLCJ2aWRlb0R1cmF0aW9uIiwiYnVmZmVyQWN0aW9uIiwicGF1c2UiLCJpc1N0YXRpYyIsIm5leHQiLCJzdG9yeSIsImdsb2JhbEhlYWRlciIsImNoaWxkcmVuIiwiaGVhZGVyIiwic3R5bGUiLCJwb3NpdGlvbiIsImxlZnQiLCJ0b3AiLCJ6SW5kZXgiLCJoZWFkaW5nIiwic3ViaGVhZGluZyIsInByb2ZpbGVJbWFnZSIsImFjdGlvbiIsImN1c3RvbUNvbGxhcHNlZCIsInVzZVN0YXRlIiwic2hvd01vcmUiLCJzZXRTaG93TW9yZSIsIkNvbGxhcHNlZENvbXBvbmVudCIsInNlZU1vcmUiLCJtYXJnaW4iLCJib3R0b20iLCJ0b2dnbGVNb3JlIiwic2hvdyIsInNob3dDb250ZW50Iiwic2VlTW9yZUNvbnRlbnQiLCJzZWVNb3JlQ29sbGFwc2VkIiwiUmVhY3RJbnN0YVN0b3JpZXMiLCJwcm9wcyIsInJlbmRlcmVycyIsImNvbmNhdCIsImNvbnRleHQiLCJsb2FkZXIiLCJzdG9yeUNvbnRhaW5lclN0eWxlcyIsInN0b3J5U3R5bGVzIiwibG9vcCIsImlzUGF1c2VkIiwiY3VycmVudEluZGV4Iiwib25TdG9yeVN0YXJ0Iiwib25TdG9yeUVuZCIsIm9uQWxsU3Rvcmllc0VuZCIsImtleWJvYXJkTmF2aWdhdGlvbiIsInByZXZlbnREZWZhdWx0IiwiZ2VuZXJhdGVTdG9yaWVzIiwic2V0U3RvcmllcyIsInVzZUVmZmVjdCIsIlByb3ZpZGVyIiwibWFwIiwidXJsIiwidHlwZSIsImFzc2lnbiIsInJlbmRlcmVyIiwiZ2V0UmVuZGVyZXIiLCJvcmlnaW5hbENvbnRlbnQiLCJjb250ZW50IiwiZGVmYXVsdFByb3BzIiwiV2l0aEhlYWRlciIsIldpdGhTZWVNb3JlIiwic2V0Q3VycmVudElkIiwic2V0UGF1c2UiLCJzZXRCdWZmZXJBY3Rpb24iLCJzZXRWaWRlb0R1cmF0aW9uIiwibW91c2Vkb3duSWQiLCJ1c2VSZWYiLCJpc01vdW50ZWQiLCJ1c2VDb250ZXh0IiwibGVuZ3RoIiwic2V0Q3VycmVudElkV3JhcHBlciIsImNvbnNvbGUiLCJlcnJvciIsIndpbmRvdyIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImhhbmRsZUtleURvd24iLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY3VycmVudCIsImUiLCJwcmV2aW91cyIsInRvZ2dsZVN0YXRlIiwiY2FsbGJhY2siLCJwcmV2IiwidXBkYXRlTmV4dFN0b3J5SWRGb3JMb29wIiwidXBkYXRlTmV4dFN0b3J5SWQiLCJkZWJvdW5jZVBhdXNlIiwic2V0VGltZW91dCIsIm1vdXNlVXAiLCJjbGVhclRpbWVvdXQiLCJzdHlsZXMiLCJjb250YWluZXIiLCJwbGF5U3RhdGUiLCJnZXRWaWRlb0R1cmF0aW9uIiwiZHVyYXRpb24iLCJvdmVybGF5Iiwib25Ub3VjaFN0YXJ0Iiwib25Ub3VjaEVuZCIsIm9uTW91c2VEb3duIiwib25Nb3VzZVVwIiwiZGlzcGxheSIsImZsZXhEaXJlY3Rpb24iLCJiYWNrZ3JvdW5kIiwib3ZlcmZsb3ciLCJhbGlnbkl0ZW1zIiwic3RvcnlDb250ZW50IiwibWF4V2lkdGgiLCJtYXhIZWlnaHQiLCJJbm5lckNvbnRlbnQiLCJjb25maWciLCJnbG9iYWxDb250ZXh0IiwicmVuZGVyZXJNZXNzYWdlSGFuZGxlciIsImRhdGEiLCJhY2siLCJtZXNzYWdlSGFuZGxlciIsImNvdW50Iiwic2V0Q291bnQiLCJhbmltYXRpb25GcmFtZUlkIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiaW5jcmVtZW50Q291bnQiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImNvdW50Q29weSIsInN0b3J5U3RhcnRDYWxsYmFjayIsImludGVydmFsIiwiZ2V0Q3VycmVudEludGVydmFsIiwic3RvcnlFbmRDYWxsYmFjayIsImFsbFN0b3JpZXNFbmRDYWxsYmFjayIsInByb2dyZXNzQXJyIiwiXyIsImFjdGl2ZSIsImp1c3RpZnlDb250ZW50IiwiZmxleFdyYXAiLCJwYWRkaW5nIiwicGFkZGluZ1RvcCIsImFsaWduU2VsZiIsImZpbHRlciIsInRyYW5zZm9ybSIsImdldFByb2dyZXNzU3R5bGUiLCJpbm5lciIsImJvcmRlclJhZGl1cyIsInRyYW5zZm9ybU9yaWdpbiIsIldlYmtpdEJhY2tmYWNlVmlzaWJpbGl0eSIsIk1vekJhY2tmYWNlVmlzaWJpbGl0eSIsIm1zQmFja2ZhY2VWaXNpYmlsaXR5IiwiYmFja2ZhY2VWaXNpYmlsaXR5IiwiV2Via2l0UGVyc3BlY3RpdmUiLCJNb3pQZXJzcGVjdGl2ZSIsIm1zUGVyc3BlY3RpdmUiLCJwZXJzcGVjdGl2ZSIsImdldFByb2dyZXNzV3JhcHBlclN0eWxlIiwib3BhY2l0eSIsInByb2dyZXNzIiwidHJhbnNpdGlvbiIsInByb2JhYmxlIiwidGVzdGVyUmVzdWx0IiwidGVzdGVyIiwiY29uZGl0aW9uIiwic29ydCIsImEiLCJiIiwicHJpb3JpdHkiLCJSZWFjdCIsImxvYWRlZCIsInNldExvYWRlZCIsImNvbXB1dGVkU3R5bGVzIiwic3JjIiwib25Mb2FkIiwiY29sb3IiLCJ4bWxucyIsInN0cm9rZSIsImZpbGwiLCJmaWxsUnVsZSIsInN0cm9rZVdpZHRoIiwiY3giLCJjeSIsImF0dHJpYnV0ZU5hbWUiLCJiZWdpbiIsImR1ciIsInZhbHVlcyIsImNhbGNNb2RlIiwia2V5VGltZXMiLCJrZXlTcGxpbmVzIiwicmVwZWF0Q291bnQiLCJtYWluIiwiaW1nIiwibWFyZ2luUmlnaHQiLCJib3JkZXIiLCJ0ZXh0IiwiZm9udFNpemUiLCJtYXJnaW5Cb3R0b20iLCJTZWVNb3JlQ29udGVudCIsIkN1c3RvbUNvbGxhcHNlZCIsInNlZU1vcmVFeHBhbmRlZCIsImNsb3NlIiwib25DbGljayIsInN0b3BQcm9wYWdhdGlvbiIsInNlZU1vcmVJY29uIiwic2VlTW9yZVRleHQiLCJib3hTaXppbmciLCJ0ZXh0QWxpZ24iLCJsZXR0ZXJTcGFjaW5nIiwidGV4dFRyYW5zZm9ybSIsInNlZU1vcmVDbG9zZSIsInJpZ2h0IiwibXV0ZWQiLCJzZXRNdXRlZCIsInZpZCIsInBsYXkiLCJ2aWRlb0NvbnRhaW5lciIsInJlZiIsImNvbnRyb2xzIiwib25Mb2FkZWREYXRhIiwidGhlbiIsInBsYXlzSW5saW5lIiwib25XYWl0aW5nIiwib25QbGF5aW5nIiwiYXV0b1BsYXkiLCJDb250ZW50Il0sIm1hcHBpbmdzIjoiQ0FBQSxTQUEyQ0EsRUFBTUMsR0FDMUIsaUJBQVpDLFNBQTBDLGlCQUFYQyxPQUN4Q0EsT0FBT0QsUUFBVUQsRUFBUUcsUUFBUSxVQUNSLG1CQUFYQyxRQUF5QkEsT0FBT0MsSUFDOUNELE9BQU8sVUFBVyxDQUFDLFNBQVVKLEdBQ0gsaUJBQVpDLFFBQ2RBLFFBQWlCLFFBQUlELEVBQVFHLFFBQVEsVUFFckNKLEVBQWMsUUFBSUMsRUFBUUQsRUFBWSxPQVJ4QyxDQVNHTyxNQUFNLFNBQVNDLEdBQ2xCLE8sWUNURSxJQUFJQyxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVVCxRQUduQyxJQUFJQyxFQUFTTSxFQUFpQkUsR0FBWSxDQUN6Q0MsRUFBR0QsRUFDSEUsR0FBRyxFQUNIWCxRQUFTLElBVVYsT0FOQVksRUFBUUgsR0FBVUksS0FBS1osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU1EsR0FHL0RQLEVBQU9VLEdBQUksRUFHSlYsRUFBT0QsUUEwRGYsT0FyREFRLEVBQW9CTSxFQUFJRixFQUd4QkosRUFBb0JPLEVBQUlSLEVBR3hCQyxFQUFvQlEsRUFBSSxTQUFTaEIsRUFBU2lCLEVBQU1DLEdBQzNDVixFQUFvQlcsRUFBRW5CLEVBQVNpQixJQUNsQ0csT0FBT0MsZUFBZXJCLEVBQVNpQixFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVWLEVBQW9CZ0IsRUFBSSxTQUFTeEIsR0FDWCxvQkFBWHlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZXJCLEVBQVN5QixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWVyQixFQUFTLGFBQWMsQ0FBRTJCLE9BQU8sS0FRdkRuQixFQUFvQm9CLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMs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QkFBR2pHLE1BQU9rRixFQUFPaUcsTUFBSSxxQ0FJN0IsSUFBTWpHLEVBQVMsQ0FDWGUsYUFBYyxDQUNWakgsTUFBTyxPQUNQbUgsVUFBVyxPQUNYcEYsT0FBUSxRQUVab0ssS0FBTSxDQUNGWSxVQUFXLFNBQ1hoQyxNQUFPLFFBQ1AvSyxNQUFPLE1BQ1ArQixPQUFRLFNBSUgsRUFBQW9JLE9BQWlCLFdBQzFCLE1BQU8sQ0FDSEMsV0FBVyxFQUNYSSxTQUFVLElBSWxCLFVBQWUsQ0FDWDFHLFNBQUEsRUFBQUEsU0FDQXFHLE9BQUEsRUFBQUEsUyw0bkJDcENKLGNBR2EsRUFBQXJHLFNBQXFCLFNBQUN2QixHQUMvQmtJLEVBQU1qSCxXQUFVLFdBQ1pqQixFQUFNZixPQUFPLFVBQ2QsQ0FBQ2UsRUFBTTNCLFFBQ1YsSUFBTXFOLEVBQVUxTCxFQUFNM0IsTUFBTW9ELGdCQUM1QixPQUFPLGdCQUFDaUssRUFBTyxpQkFBSzFMLEtBR1gsRUFBQTRILE9BQWlCLFNBQUN2SixHQUMzQixNQUFPLENBQ0h3SixZQUFheEosRUFBTXFELFFBQ25CdUcsU0FBVSxJQUlsQixVQUFlLENBQ1gxRyxTQUFBLEVBQUFBLFNBQ0FxRyxPQUFBLEVBQUFBIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwicmVhY3RcIikpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoXCJTdG9yaWVzXCIsIFtcIlJlYWN0XCJdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIlN0b3JpZXNcIl0gPSBmYWN0b3J5KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cdGVsc2Vcblx0XHRyb290W1wiU3Rvcmllc1wiXSA9IGZhY3Rvcnkocm9vdFtcIlJlYWN0XCJdKTtcbn0pKHRoaXMsIGZ1bmN0aW9uKF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzBfXykge1xucmV0dXJuICIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA3KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMF9fOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBHbG9iYWxDdHggfSBmcm9tICcuLi9pbnRlcmZhY2VzJztcblxuZXhwb3J0IGNvbnN0IGluaXRpYWxDb250ZXh0ID0ge1xuXHRkZWZhdWx0SW50ZXJ2YWw6IDQwMDAsXG5cdHdpZHRoOiAzNjAsXG5cdGhlaWdodDogNjQwLFxufTtcblxuY29uc3QgR2xvYmFsQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8R2xvYmFsQ3R4Pihpbml0aWFsQ29udGV4dCk7XG5cbmV4cG9ydCBkZWZhdWx0IEdsb2JhbENvbnRleHQ7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcblx0U3Rvcmllc0NvbnRleHQgYXMgU3Rvcmllc0NvbnRleHRJbnRlcmZhY2UsXG5cdFN0b3J5LFxufSBmcm9tICcuLi9pbnRlcmZhY2VzJztcblxuZXhwb3J0IGNvbnN0IGluaXRpYWxDb250ZXh0OiB7IHN0b3JpZXM6IFN0b3J5W10gfSA9IHtcblx0c3RvcmllczogW10sXG59O1xuXG5jb25zdCBTdG9yaWVzQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8U3Rvcmllc0NvbnRleHRJbnRlcmZhY2U+KFxuXHRpbml0aWFsQ29udGV4dFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgU3Rvcmllc0NvbnRleHQ7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBQcm9ncmVzc0NvbnRleHQgfSBmcm9tICcuLy4uL2ludGVyZmFjZXMnXG5cbmV4cG9ydCBkZWZhdWx0IFJlYWN0LmNyZWF0ZUNvbnRleHQ8UHJvZ3Jlc3NDb250ZXh0Pih7XG4gICAgY3VycmVudElkOiAwLFxuICAgIHZpZGVvRHVyYXRpb246IDAsXG4gICAgYnVmZmVyQWN0aW9uOiBmYWxzZSxcbiAgICBwYXVzZTogZmFsc2UsXG4gICAgaXNTdGF0aWM6IGZhbHNlLFxuICAgIG5leHQ6ICgpID0+IHsgfVxufSkiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU3RvcnkgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzJztcbmltcG9ydCBIZWFkZXIgZnJvbSBcIi4vLi4vLi4vY29tcG9uZW50cy9IZWFkZXJcIjtcblxuY29uc3Qgd2l0aEhlYWRlcjogUmVhY3QuRkM8eyBzdG9yeTogU3RvcnksIGdsb2JhbEhlYWRlcjogRnVuY3Rpb24gfT4gPSAoeyBzdG9yeSwgZ2xvYmFsSGVhZGVyLCBjaGlsZHJlbiB9KSA9PiB7XG4gICAgcmV0dXJuIDw+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAge3N0b3J5LmhlYWRlciAmJiAoXG4gICAgICAgICAgICA8ZGl2IHN0eWxlPXt7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIGxlZnQ6IDEyLCB0b3A6IDIwLCB6SW5kZXg6IDE5IH19PlxuICAgICAgICAgICAgICAgIHt0eXBlb2Ygc3RvcnkgPT09IFwib2JqZWN0XCIgPyAoXG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbEhlYWRlciA/IChcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbEhlYWRlcihzdG9yeS5oZWFkZXIpXG4gICAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEhlYWRlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkaW5nPXtzdG9yeS5oZWFkZXIuaGVhZGluZ31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViaGVhZGluZz17c3RvcnkuaGVhZGVyLnN1YmhlYWRpbmd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2ZpbGVJbWFnZT17c3RvcnkuaGVhZGVyLnByb2ZpbGVJbWFnZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICl9XG4gICAgPC8+XG59XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhIZWFkZXI7IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudFR5cGUsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQWN0aW9uLCBTZWVNb3JlUHJvcHMsIFN0b3J5IH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgU2VlTW9yZSBmcm9tIFwiLi8uLi8uLi9jb21wb25lbnRzL1NlZU1vcmVcIjtcblxuY29uc3Qgd2l0aFNlZU1vcmU6IFJlYWN0LkZDPHtcbiAgICBzdG9yeTogU3RvcnksXG4gICAgYWN0aW9uOiBBY3Rpb24sXG4gICAgY3VzdG9tQ29sbGFwc2VkPzogU2VlTW9yZVByb3BzW1wiY3VzdG9tQ29sbGFwc2VkXCJdXG59PiA9ICh7IHN0b3J5LCBhY3Rpb24sIGN1c3RvbUNvbGxhcHNlZCwgY2hpbGRyZW4gfSkgPT4ge1xuICAgIGNvbnN0IFtzaG93TW9yZSwgc2V0U2hvd01vcmVdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IHRvZ2dsZU1vcmUgPSAoc2hvdykgPT4ge1xuICAgICAgICBhY3Rpb24oc2hvdyA/ICdwYXVzZScgOiAncGxheScpO1xuICAgICAgICBzZXRTaG93TW9yZShzaG93KTtcbiAgICB9XG4gICAgY29uc3QgQ29sbGFwc2VkQ29tcG9uZW50ID0gU2VlTW9yZTtcbiAgICByZXR1cm4gPD5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgICB7c3Rvcnkuc2VlTW9yZSAmJiAoXG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiBcImF1dG9cIixcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tOiBzaG93TW9yZSA/ICd1bnNldCcgOiAwLFxuICAgICAgICAgICAgICAgICAgICB6SW5kZXg6IDk5OTksXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBzaG93TW9yZSA/ICcxMDAlJyA6ICdhdXRvJ1xuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPENvbGxhcHNlZENvbXBvbmVudFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb249e2FjdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgdG9nZ2xlTW9yZT17dG9nZ2xlTW9yZX1cbiAgICAgICAgICAgICAgICAgICAgc2hvd0NvbnRlbnQ9e3Nob3dNb3JlfVxuICAgICAgICAgICAgICAgICAgICBzZWVNb3JlQ29udGVudD17c3Rvcnkuc2VlTW9yZX1cbiAgICAgICAgICAgICAgICAgICAgY3VzdG9tQ29sbGFwc2VkPXtjdXN0b21Db2xsYXBzZWQgfHwgc3Rvcnkuc2VlTW9yZUNvbGxhcHNlZH1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICl9XG4gICAgPC8+XG59XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhTZWVNb3JlOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgU3Bpbm5lclNWRyBmcm9tICcuLy4uL2Fzc2V0cy9wdWZmLnN2Zyc7XG5cbmNvbnN0IFNwaW5uZXIgPSAoKSA9PiB7XG4gICAgcmV0dXJuIDxTcGlubmVyU1ZHIC8+XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNwaW5uZXI7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IFJlYWN0SW5zdGFTdG9yaWVzUHJvcHMsIEdsb2JhbEN0eCwgU3RvcnksIFRlc3RlciwgUmVuZGVyZXIgfSBmcm9tICcuL2ludGVyZmFjZXMnXG5pbXBvcnQgQ29udGFpbmVyIGZyb20gJy4vY29tcG9uZW50cy9Db250YWluZXInXG5pbXBvcnQgR2xvYmFsQ29udGV4dCBmcm9tICcuL2NvbnRleHQvR2xvYmFsJ1xuaW1wb3J0IFN0b3JpZXNDb250ZXh0IGZyb20gJy4vY29udGV4dC9TdG9yaWVzJztcbmltcG9ydCB7IGdldFJlbmRlcmVyIH0gZnJvbSAnLi91dGlsL3JlbmRlcmVycydcbmltcG9ydCB7IHJlbmRlcmVycyBhcyBkZWZhdWx0UmVuZGVyZXJzIH0gZnJvbSAnLi9yZW5kZXJlcnMvaW5kZXgnO1xuaW1wb3J0IHdpdGhIZWFkZXIgZnJvbSAnLi9yZW5kZXJlcnMvd3JhcHBlcnMvd2l0aEhlYWRlcidcbmltcG9ydCB3aXRoU2VlTW9yZSBmcm9tICcuL3JlbmRlcmVycy93cmFwcGVycy93aXRoU2VlTW9yZSdcblxuY29uc3QgUmVhY3RJbnN0YVN0b3JpZXMgPSBmdW5jdGlvbiAocHJvcHM6IFJlYWN0SW5zdGFTdG9yaWVzUHJvcHMpIHtcbiAgICBsZXQgcmVuZGVyZXJzID0gcHJvcHMucmVuZGVyZXJzID8gcHJvcHMucmVuZGVyZXJzLmNvbmNhdChkZWZhdWx0UmVuZGVyZXJzKSA6IGRlZmF1bHRSZW5kZXJlcnM7XG4gICAgbGV0IGNvbnRleHQ6IEdsb2JhbEN0eCA9IHtcbiAgICAgICAgd2lkdGg6IHByb3BzLndpZHRoLFxuICAgICAgICBoZWlnaHQ6IHByb3BzLmhlaWdodCxcbiAgICAgICAgbG9hZGVyOiBwcm9wcy5sb2FkZXIsXG4gICAgICAgIGhlYWRlcjogcHJvcHMuaGVhZGVyLFxuICAgICAgICBzdG9yeUNvbnRhaW5lclN0eWxlczogcHJvcHMuc3RvcnlDb250YWluZXJTdHlsZXMsXG4gICAgICAgIHN0b3J5U3R5bGVzOiBwcm9wcy5zdG9yeVN0eWxlcyxcbiAgICAgICAgbG9vcDogcHJvcHMubG9vcCxcbiAgICAgICAgZGVmYXVsdEludGVydmFsOiBwcm9wcy5kZWZhdWx0SW50ZXJ2YWwsXG4gICAgICAgIGlzUGF1c2VkOiBwcm9wcy5pc1BhdXNlZCxcbiAgICAgICAgY3VycmVudEluZGV4OiBwcm9wcy5jdXJyZW50SW5kZXgsXG4gICAgICAgIG9uU3RvcnlTdGFydDogcHJvcHMub25TdG9yeVN0YXJ0LFxuICAgICAgICBvblN0b3J5RW5kOiBwcm9wcy5vblN0b3J5RW5kLFxuICAgICAgICBvbkFsbFN0b3JpZXNFbmQ6IHByb3BzLm9uQWxsU3Rvcmllc0VuZCxcbiAgICAgICAga2V5Ym9hcmROYXZpZ2F0aW9uOiBwcm9wcy5rZXlib2FyZE5hdmlnYXRpb24sXG4gICAgICAgIHByZXZlbnREZWZhdWx0OiBwcm9wcy5wcmV2ZW50RGVmYXVsdCxcbiAgICAgICAgaXNTdGF0aWM6IHByb3BzLmlzU3RhdGljXG4gICAgfVxuICAgIGNvbnN0IFtzdG9yaWVzLCBzZXRTdG9yaWVzXSA9IHVzZVN0YXRlPHsgc3RvcmllczogU3RvcnlbXSB9Pih7IHN0b3JpZXM6IGdlbmVyYXRlU3Rvcmllcyhwcm9wcy5zdG9yaWVzLCByZW5kZXJlcnMpIH0pO1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHNldFN0b3JpZXMoeyBzdG9yaWVzOiBnZW5lcmF0ZVN0b3JpZXMocHJvcHMuc3RvcmllcywgcmVuZGVyZXJzKSB9KTtcbiAgICB9LCBbcHJvcHMuc3RvcmllcywgcHJvcHMucmVuZGVyZXJzXSk7XG5cbiAgICByZXR1cm4gPEdsb2JhbENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2NvbnRleHR9PlxuICAgICAgICA8U3Rvcmllc0NvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3N0b3JpZXN9PlxuICAgICAgICAgICAgPENvbnRhaW5lciAvPlxuICAgICAgICA8L1N0b3JpZXNDb250ZXh0LlByb3ZpZGVyPlxuICAgIDwvR2xvYmFsQ29udGV4dC5Qcm92aWRlcj5cbn1cblxuY29uc3QgZ2VuZXJhdGVTdG9yaWVzID0gKHN0b3JpZXM6IFN0b3J5W10sIHJlbmRlcmVyczogeyByZW5kZXJlcjogUmVuZGVyZXIsIHRlc3RlcjogVGVzdGVyIH1bXSkgPT4ge1xuICAgIHJldHVybiBzdG9yaWVzLm1hcChzID0+IHtcbiAgICAgICAgbGV0IHN0b3J5OiBTdG9yeSA9IHt9O1xuXG4gICAgICAgIGlmICh0eXBlb2YgcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHN0b3J5LnVybCA9IHM7XG4gICAgICAgICAgICBzdG9yeS50eXBlID0gJ2ltYWdlJztcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHN0b3J5ID0gT2JqZWN0LmFzc2lnbihzdG9yeSwgcyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmVuZGVyZXIgPSBnZXRSZW5kZXJlcihzdG9yeSwgcmVuZGVyZXJzKTtcbiAgICAgICAgc3Rvcnkub3JpZ2luYWxDb250ZW50ID0gc3RvcnkuY29udGVudDtcbiAgICAgICAgc3RvcnkuY29udGVudCA9IHJlbmRlcmVyO1xuICAgICAgICByZXR1cm4gc3RvcnlcbiAgICB9KVxufTtcblxuUmVhY3RJbnN0YVN0b3JpZXMuZGVmYXVsdFByb3BzID0ge1xuICAgIHdpZHRoOiAzNjAsXG4gICAgaGVpZ2h0OiA2NDAsXG4gICAgZGVmYXVsdEludGVydmFsOiA0MDAwXG59XG5cbmV4cG9ydCBjb25zdCBXaXRoSGVhZGVyID0gd2l0aEhlYWRlcjtcbmV4cG9ydCBjb25zdCBXaXRoU2VlTW9yZSA9IHdpdGhTZWVNb3JlO1xuXG5leHBvcnQgZGVmYXVsdCBSZWFjdEluc3RhU3RvcmllcyIsImltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0LCB1c2VTdGF0ZSwgdXNlUmVmLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBHbG9iYWxDb250ZXh0IGZyb20gJy4vLi4vY29udGV4dC9HbG9iYWwnXG5pbXBvcnQgU3Rvcmllc0NvbnRleHQgZnJvbSAnLi8uLi9jb250ZXh0L1N0b3JpZXMnXG5pbXBvcnQgUHJvZ3Jlc3NDb250ZXh0IGZyb20gJy4vLi4vY29udGV4dC9Qcm9ncmVzcydcbmltcG9ydCBTdG9yeSBmcm9tICcuL1N0b3J5J1xuaW1wb3J0IFByb2dyZXNzQXJyYXkgZnJvbSAnLi9Qcm9ncmVzc0FycmF5J1xuaW1wb3J0IHsgR2xvYmFsQ3R4LCBTdG9yaWVzQ29udGV4dCBhcyBTdG9yaWVzQ29udGV4dEludGVyZmFjZSB9IGZyb20gJy4vLi4vaW50ZXJmYWNlcydcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IFtjdXJyZW50SWQsIHNldEN1cnJlbnRJZF0gPSB1c2VTdGF0ZTxudW1iZXI+KDApXG4gICAgY29uc3QgW3BhdXNlLCBzZXRQYXVzZV0gPSB1c2VTdGF0ZTxib29sZWFuPih0cnVlKVxuICAgIGNvbnN0IFtidWZmZXJBY3Rpb24sIHNldEJ1ZmZlckFjdGlvbl0gPSB1c2VTdGF0ZTxib29sZWFuPih0cnVlKVxuICAgIGNvbnN0IFt2aWRlb0R1cmF0aW9uLCBzZXRWaWRlb0R1cmF0aW9uXSA9IHVzZVN0YXRlPG51bWJlcj4oMClcblxuICAgIGxldCBtb3VzZWRvd25JZCA9IHVzZVJlZjxhbnk+KCk7XG4gICAgbGV0IGlzTW91bnRlZCA9IHVzZVJlZjxib29sZWFuPih0cnVlKTtcblxuICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCwgbG9vcCwgY3VycmVudEluZGV4LCBpc1N0YXRpYywgaXNQYXVzZWQsIGtleWJvYXJkTmF2aWdhdGlvbiwgcHJldmVudERlZmF1bHQsIHN0b3J5Q29udGFpbmVyU3R5bGVzID0ge30gfSA9IHVzZUNvbnRleHQ8R2xvYmFsQ3R4PihHbG9iYWxDb250ZXh0KTtcbiAgICBjb25zdCB7IHN0b3JpZXMgfSA9IHVzZUNvbnRleHQ8U3Rvcmllc0NvbnRleHRJbnRlcmZhY2U+KFN0b3JpZXNDb250ZXh0KTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgY3VycmVudEluZGV4ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRJbmRleCA+PSAwICYmIGN1cnJlbnRJbmRleCA8IHN0b3JpZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgc2V0Q3VycmVudElkV3JhcHBlcigoKSA9PiBjdXJyZW50SW5kZXgpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0luZGV4IG91dCBvZiBib3VuZHMuIEN1cnJlbnQgaW5kZXggd2FzIHNldCB0byB2YWx1ZSBtb3JlIHRoYW4gdGhlIGxlbmd0aCBvZiBzdG9yaWVzIGFycmF5LicsIGN1cnJlbnRJbmRleClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIFtjdXJyZW50SW5kZXhdKVxuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBpc1BhdXNlZCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBzZXRQYXVzZShpc1BhdXNlZClcbiAgICAgICAgfVxuICAgIH0sIFtpc1BhdXNlZF0pXG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjb25zdCBpc0NsaWVudCA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQpO1xuICAgICAgICBpZiAoaXNDbGllbnQgJiYgKHR5cGVvZiBrZXlib2FyZE5hdmlnYXRpb24gPT09ICdib29sZWFuJyAmJiBrZXlib2FyZE5hdmlnYXRpb24pKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBoYW5kbGVLZXlEb3duKTtcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgaGFuZGxlS2V5RG93bik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCBba2V5Ym9hcmROYXZpZ2F0aW9uXSk7XG5cbiAgICAvLyBDbGVhbnVwIG1vdW50ZWQgc3RhdGUgLSBmb3IgaXNzdWUgIzEzMCAoaHR0cHM6Ly9naXRodWIuY29tL21vaGl0azA1L3JlYWN0LWluc3RhLXN0b3JpZXMvaXNzdWVzLzEzMClcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgaXNNb3VudGVkLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH0sIFtdKTtcblxuICAgIGNvbnN0IGhhbmRsZUtleURvd24gPSAoZTogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgICBpZiAoZS5rZXkgPT09ICdBcnJvd0xlZnQnKSB7XG4gICAgICAgICAgICBwcmV2aW91cygpXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZS5rZXkgPT09ICdBcnJvd1JpZ2h0Jykge1xuICAgICAgICAgICAgbmV4dCgpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCB0b2dnbGVTdGF0ZSA9IChhY3Rpb246IHN0cmluZywgYnVmZmVyQWN0aW9uPzogYm9vbGVhbikgPT4ge1xuICAgICAgICBpZihpc1N0YXRpYykge1xuICAgICAgICAgICAgc2V0QnVmZmVyQWN0aW9uKCEhYnVmZmVyQWN0aW9uKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzZXRQYXVzZShhY3Rpb24gPT09ICdwYXVzZScpO1xuICAgICAgICBzZXRCdWZmZXJBY3Rpb24oISFidWZmZXJBY3Rpb24pO1xuICAgIH1cblxuICAgIGNvbnN0IHNldEN1cnJlbnRJZFdyYXBwZXIgPSAoY2FsbGJhY2spID0+IHtcbiAgICAgICAgc2V0Q3VycmVudElkKGNhbGxiYWNrKTtcbiAgICAgICAgaWYoaXNTdGF0aWMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0b2dnbGVTdGF0ZSgncGF1c2UnLCB0cnVlKTtcbiAgICB9XG5cbiAgICBjb25zdCBwcmV2aW91cyA9ICgpID0+IHtcbiAgICAgICAgc2V0Q3VycmVudElkV3JhcHBlcihwcmV2ID0+IHByZXYgPiAwID8gcHJldiAtIDEgOiBwcmV2KVxuICAgIH1cblxuICAgIGNvbnN0IG5leHQgPSAoKSA9PiB7XG4gICAgICAgIGlmIChpc01vdW50ZWQuY3VycmVudCkge1xuICAgICAgICAgICAgaWYgKGxvb3ApIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVOZXh0U3RvcnlJZEZvckxvb3AoKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVOZXh0U3RvcnlJZCgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgdXBkYXRlTmV4dFN0b3J5SWRGb3JMb29wID0gKCkgPT4ge1xuICAgICAgICBzZXRDdXJyZW50SWRXcmFwcGVyKHByZXYgPT4gKHByZXYgKyAxKSAlIHN0b3JpZXMubGVuZ3RoKVxuICAgIH1cblxuICAgIGNvbnN0IHVwZGF0ZU5leHRTdG9yeUlkID0gKCkgPT4ge1xuICAgICAgICBzZXRDdXJyZW50SWRXcmFwcGVyKHByZXYgPT4ge1xuICAgICAgICAgICAgaWYgKHByZXYgPCBzdG9yaWVzLmxlbmd0aCAtIDEpIHJldHVybiBwcmV2ICsgMVxuICAgICAgICAgICAgcmV0dXJuIHByZXZcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBkZWJvdW5jZVBhdXNlID0gKGU6IFJlYWN0Lk1vdXNlRXZlbnQgfCBSZWFjdC5Ub3VjaEV2ZW50KSA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgICBtb3VzZWRvd25JZC5jdXJyZW50ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0b2dnbGVTdGF0ZSgncGF1c2UnKVxuICAgICAgICB9LCAyMDApXG4gICAgfVxuXG4gICAgY29uc3QgbW91c2VVcCA9ICh0eXBlOiBzdHJpbmcpID0+IChlOiBSZWFjdC5Nb3VzZUV2ZW50IHwgUmVhY3QuVG91Y2hFdmVudCkgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgbW91c2Vkb3duSWQuY3VycmVudCAmJiBjbGVhclRpbWVvdXQobW91c2Vkb3duSWQuY3VycmVudClcbiAgICAgICAgaWYgKHBhdXNlKSB7XG4gICAgICAgICAgICB0b2dnbGVTdGF0ZSgncGxheScpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0eXBlID09PSAnbmV4dCcgPyBuZXh0KCkgOiBwcmV2aW91cygpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBnZXRWaWRlb0R1cmF0aW9uID0gKGR1cmF0aW9uOiBudW1iZXIpID0+IHtcbiAgICAgICAgc2V0VmlkZW9EdXJhdGlvbihkdXJhdGlvbiAqIDEwMDApXG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBzdHlsZT17eyAuLi5zdHlsZXMuY29udGFpbmVyLCAuLi5zdG9yeUNvbnRhaW5lclN0eWxlcywgLi4ueyB3aWR0aCwgaGVpZ2h0IH0gfX0+XG4gICAgICAgICAgICA8UHJvZ3Jlc3NDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt7XG4gICAgICAgICAgICAgICAgYnVmZmVyQWN0aW9uOiBidWZmZXJBY3Rpb24sXG4gICAgICAgICAgICAgICAgdmlkZW9EdXJhdGlvbjogdmlkZW9EdXJhdGlvbixcbiAgICAgICAgICAgICAgICBjdXJyZW50SWQsXG4gICAgICAgICAgICAgICAgcGF1c2UsXG4gICAgICAgICAgICAgICAgbmV4dCxcbiAgICAgICAgICAgICAgICBpc1N0YXRpY1xuICAgICAgICAgICAgfX0+XG4gICAgICAgICAgICAgICAgPFByb2dyZXNzQXJyYXkgLz5cbiAgICAgICAgICAgIDwvUHJvZ3Jlc3NDb250ZXh0LlByb3ZpZGVyPlxuICAgICAgICAgICAgPFN0b3J5XG4gICAgICAgICAgICAgICAgYWN0aW9uPXt0b2dnbGVTdGF0ZX1cbiAgICAgICAgICAgICAgICBidWZmZXJBY3Rpb249e2J1ZmZlckFjdGlvbn1cbiAgICAgICAgICAgICAgICBwbGF5U3RhdGU9e3BhdXNlfVxuICAgICAgICAgICAgICAgIHN0b3J5PXtzdG9yaWVzW2N1cnJlbnRJZF19XG4gICAgICAgICAgICAgICAgZ2V0VmlkZW9EdXJhdGlvbj17Z2V0VmlkZW9EdXJhdGlvbn1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB7IXByZXZlbnREZWZhdWx0ICYmIDxkaXYgc3R5bGU9e3N0eWxlcy5vdmVybGF5fT5cbiAgICAgICAgICAgICAgPGRpdiBzdHlsZT17eyB3aWR0aDogJzUwJScsIHpJbmRleDogOTk5IH19IG9uVG91Y2hTdGFydD17ZGVib3VuY2VQYXVzZX0gb25Ub3VjaEVuZD17bW91c2VVcCgncHJldmlvdXMnKX0gb25Nb3VzZURvd249e2RlYm91bmNlUGF1c2V9IG9uTW91c2VVcD17bW91c2VVcCgncHJldmlvdXMnKX0gLz5cbiAgICAgICAgICAgICAgPGRpdiBzdHlsZT17eyB3aWR0aDogJzUwJScsIHpJbmRleDogOTk5IH19IG9uVG91Y2hTdGFydD17ZGVib3VuY2VQYXVzZX0gb25Ub3VjaEVuZD17bW91c2VVcCgnbmV4dCcpfSBvbk1vdXNlRG93bj17ZGVib3VuY2VQYXVzZX0gb25Nb3VzZVVwPXttb3VzZVVwKCduZXh0Jyl9IC8+XG4gICAgICAgICAgICA8L2Rpdj59XG4gICAgICAgIDwvZGl2PlxuICAgIClcbn1cblxuY29uc3Qgc3R5bGVzID0ge1xuICAgIGNvbnRhaW5lcjoge1xuICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgICBiYWNrZ3JvdW5kOiAnIzExMScsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgfSxcbiAgICBvdmVybGF5OiB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICBoZWlnaHQ6ICdpbmhlcml0JyxcbiAgICAgICAgd2lkdGg6ICdpbmhlcml0JyxcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnXG4gICAgfVxufVxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFN0b3J5UHJvcHMsIEdsb2JhbEN0eCB9IGZyb20gXCIuLy4uL2ludGVyZmFjZXNcIjtcbmltcG9ydCBHbG9iYWxDb250ZXh0IGZyb20gXCIuLy4uL2NvbnRleHQvR2xvYmFsXCI7XG5cbmNvbnN0IFN0b3J5ID0gKHByb3BzOiBTdG9yeVByb3BzKSA9PiB7XG5cdGNvbnN0IGdsb2JhbENvbnRleHQgPSB1c2VDb250ZXh0PEdsb2JhbEN0eD4oXG5cdFx0R2xvYmFsQ29udGV4dFxuXHQpO1xuXG5cdGNvbnN0IHsgd2lkdGgsIGhlaWdodCwgbG9hZGVyLCBoZWFkZXIsIHN0b3J5U3R5bGVzIH0gPSBnbG9iYWxDb250ZXh0O1xuXG5cdGNvbnN0IHJlbmRlcmVyTWVzc2FnZUhhbmRsZXIgPSAodHlwZTogc3RyaW5nLCBkYXRhOiBhbnkpID0+IHtcblx0XHRzd2l0Y2ggKHR5cGUpIHtcblx0XHRcdGNhc2UgJ1VQREFURV9WSURFT19EVVJBVElPTic6XG5cdFx0XHRcdHByb3BzLmdldFZpZGVvRHVyYXRpb24oZGF0YS5kdXJhdGlvbik7XG5cdFx0XHRcdHJldHVybiB7IGFjazogJ09LJyBhcyAnT0snIH1cblx0XHR9XG5cdH1cblxuXHRjb25zdCBnZXRTdG9yeUNvbnRlbnQgPSAoKSA9PiB7XG5cdFx0bGV0IElubmVyQ29udGVudCA9IHByb3BzLnN0b3J5LmNvbnRlbnQ7XG5cdFx0bGV0IGNvbmZpZyA9IHsgd2lkdGgsIGhlaWdodCwgbG9hZGVyLCBoZWFkZXIsIHN0b3J5U3R5bGVzIH07XG5cdFx0cmV0dXJuIDxJbm5lckNvbnRlbnRcblx0XHRcdGFjdGlvbj17cHJvcHMuYWN0aW9ufVxuXHRcdFx0aXNQYXVzZWQ9e3Byb3BzLnBsYXlTdGF0ZX1cblx0XHRcdHN0b3J5PXtwcm9wcy5zdG9yeX1cblx0XHRcdGNvbmZpZz17Y29uZmlnfVxuXHRcdFx0bWVzc2FnZUhhbmRsZXI9e3JlbmRlcmVyTWVzc2FnZUhhbmRsZXJ9XG5cdFx0Lz5cblx0fTtcblxuXHRyZXR1cm4gKFxuXHRcdDxkaXZcblx0XHRcdHN0eWxlPXt7IC4uLnN0eWxlcy5zdG9yeSwgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCB9fVxuXHRcdD5cblx0XHRcdHtnZXRTdG9yeUNvbnRlbnQoKX1cblx0XHQ8L2Rpdj5cblx0KTtcbn07XG5cbmNvbnN0IHN0eWxlcyA9IHtcblx0c3Rvcnk6IHtcblx0XHRkaXNwbGF5OiBcImZsZXhcIixcblx0XHRwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuXHRcdG92ZXJmbG93OiBcImhpZGRlblwiLFxuXHRcdGFsaWduSXRlbXM6IFwiY2VudGVyXCJcblx0fSxcblx0c3RvcnlDb250ZW50OiB7XG5cdFx0d2lkdGg6IFwiYXV0b1wiLFxuXHRcdG1heFdpZHRoOiBcIjEwMCVcIixcblx0XHRtYXhIZWlnaHQ6IFwiMTAwJVwiLFxuXHRcdG1hcmdpbjogXCJhdXRvXCJcblx0fVxufTtcblxuZXhwb3J0IGRlZmF1bHQgU3Rvcnk7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCwgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgUHJvZ3Jlc3MgZnJvbSAnLi9Qcm9ncmVzcydcbmltcG9ydCB7IFByb2dyZXNzQ29udGV4dCwgR2xvYmFsQ3R4LCBTdG9yaWVzQ29udGV4dCBhcyBTdG9yaWVzQ29udGV4dEludGVyZmFjZSB9IGZyb20gJy4vLi4vaW50ZXJmYWNlcydcbmltcG9ydCBQcm9ncmVzc0N0eCBmcm9tICcuLy4uL2NvbnRleHQvUHJvZ3Jlc3MnXG5pbXBvcnQgR2xvYmFsQ29udGV4dCBmcm9tICcuLy4uL2NvbnRleHQvR2xvYmFsJ1xuaW1wb3J0IFN0b3JpZXNDb250ZXh0IGZyb20gJy4vLi4vY29udGV4dC9TdG9yaWVzJ1xuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7XG4gICAgY29uc3QgW2NvdW50LCBzZXRDb3VudF0gPSB1c2VTdGF0ZTxudW1iZXI+KDApXG4gICAgY29uc3QgeyBjdXJyZW50SWQsIG5leHQsIHZpZGVvRHVyYXRpb24sIHBhdXNlLCBpc1N0YXRpYyB9ID0gdXNlQ29udGV4dDxQcm9ncmVzc0NvbnRleHQ+KFByb2dyZXNzQ3R4KVxuICAgIGNvbnN0IHsgZGVmYXVsdEludGVydmFsLCBvblN0b3J5RW5kLCBvblN0b3J5U3RhcnQsIG9uQWxsU3Rvcmllc0VuZCB9ID0gdXNlQ29udGV4dDxHbG9iYWxDdHg+KEdsb2JhbENvbnRleHQpO1xuICAgIGNvbnN0IHsgc3RvcmllcyB9ID0gdXNlQ29udGV4dDxTdG9yaWVzQ29udGV4dEludGVyZmFjZT4oU3Rvcmllc0NvbnRleHQpO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgc2V0Q291bnQoMClcbiAgICB9LCBbY3VycmVudElkLCBzdG9yaWVzXSlcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmICghcGF1c2UpIHtcbiAgICAgICAgICAgIGFuaW1hdGlvbkZyYW1lSWQuY3VycmVudCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShpbmNyZW1lbnRDb3VudClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoYW5pbWF0aW9uRnJhbWVJZC5jdXJyZW50KVxuICAgICAgICB9XG4gICAgfSwgW2N1cnJlbnRJZCwgcGF1c2VdKVxuXG4gICAgbGV0IGFuaW1hdGlvbkZyYW1lSWQgPSB1c2VSZWY8bnVtYmVyPigpXG5cbiAgICBsZXQgY291bnRDb3B5ID0gY291bnQ7XG4gICAgY29uc3QgaW5jcmVtZW50Q291bnQgPSAoKSA9PiB7XG4gICAgICAgIGlmIChjb3VudENvcHkgPT09IDApIHN0b3J5U3RhcnRDYWxsYmFjaygpXG4gICAgICAgIHNldENvdW50KChjb3VudDogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbnRlcnZhbCA9IGdldEN1cnJlbnRJbnRlcnZhbCgpXG4gICAgICAgICAgICBjb3VudENvcHkgPSBjb3VudCArICgxMDAgLyAoKGludGVydmFsIC8gMTAwMCkgKiA2MCkpXG4gICAgICAgICAgICByZXR1cm4gY291bnQgKyAoMTAwIC8gKChpbnRlcnZhbCAvIDEwMDApICogNjApKVxuICAgICAgICB9KVxuICAgICAgICBpZiAoY291bnRDb3B5IDwgMTAwKSB7XG4gICAgICAgICAgICBhbmltYXRpb25GcmFtZUlkLmN1cnJlbnQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoaW5jcmVtZW50Q291bnQpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdG9yeUVuZENhbGxiYWNrKCk7XG4gICAgICAgICAgICBpZiAoY3VycmVudElkID09PSBzdG9yaWVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICBhbGxTdG9yaWVzRW5kQ2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGFuaW1hdGlvbkZyYW1lSWQuY3VycmVudCk7XG4gICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzdG9yeVN0YXJ0Q2FsbGJhY2sgPSAoKSA9PiB7XG4gICAgICAgIG9uU3RvcnlTdGFydCAmJiBvblN0b3J5U3RhcnQoY3VycmVudElkLCBzdG9yaWVzW2N1cnJlbnRJZF0pXG4gICAgfVxuXG4gICAgY29uc3Qgc3RvcnlFbmRDYWxsYmFjayA9ICgpID0+IHtcbiAgICAgICAgb25TdG9yeUVuZCAmJiBvblN0b3J5RW5kKGN1cnJlbnRJZCwgc3Rvcmllc1tjdXJyZW50SWRdKVxuICAgIH1cblxuICAgIGNvbnN0IGFsbFN0b3JpZXNFbmRDYWxsYmFjayA9ICgpID0+IHtcbiAgICAgICAgb25BbGxTdG9yaWVzRW5kICYmIG9uQWxsU3Rvcmllc0VuZChjdXJyZW50SWQsIHN0b3JpZXMpXG4gICAgfVxuXG4gICAgY29uc3QgZ2V0Q3VycmVudEludGVydmFsID0gKCkgPT4ge1xuICAgICAgICBpZiAoc3Rvcmllc1tjdXJyZW50SWRdLnR5cGUgPT09ICd2aWRlbycpIHJldHVybiB2aWRlb0R1cmF0aW9uXG4gICAgICAgIGlmICh0eXBlb2Ygc3Rvcmllc1tjdXJyZW50SWRdLmR1cmF0aW9uID09PSAnbnVtYmVyJykgcmV0dXJuIHN0b3JpZXNbY3VycmVudElkXS5kdXJhdGlvblxuICAgICAgICByZXR1cm4gZGVmYXVsdEludGVydmFsXG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLnByb2dyZXNzQXJyfT5cbiAgICAgICAgICAgIHtzdG9yaWVzLm1hcCgoXywgaSkgPT5cbiAgICAgICAgICAgICAgICA8UHJvZ3Jlc3NcbiAgICAgICAgICAgICAgICAgICAga2V5PXtpfVxuICAgICAgICAgICAgICAgICAgICBjb3VudD17Y291bnR9XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoPXsxIC8gc3Rvcmllcy5sZW5ndGh9XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZT17aSA9PT0gY3VycmVudElkID8gKGlzU3RhdGljID8gMiA6IDEpIDogKGkgPCBjdXJyZW50SWQgPyAyIDogMCl9XG4gICAgICAgICAgICAgICAgLz4pfVxuICAgICAgICA8L2Rpdj5cbiAgICApXG59XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgICBwcm9ncmVzc0Fycjoge1xuICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgbWF4V2lkdGg6ICcxMDAlJyxcbiAgICAgICAgZmxleFdyYXA6ICdyb3cnLFxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgd2lkdGg6ICc5OCUnLFxuICAgICAgICBwYWRkaW5nOiA1LFxuICAgICAgICBwYWRkaW5nVG9wOiA3LFxuICAgICAgICBhbGlnblNlbGY6ICdjZW50ZXInLFxuICAgICAgICB6SW5kZXg6IDEwMDEsXG4gICAgICAgIGZpbHRlcjogJ2Ryb3Atc2hhZG93KDAgMXB4IDhweCAjMjIyKSdcbiAgICB9XG59XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgUHJvZ3Jlc3NQcm9wcywgUHJvZ3Jlc3NDb250ZXh0IH0gZnJvbSAnLi8uLi9pbnRlcmZhY2VzJ1xuaW1wb3J0IFByb2dyZXNzV3JhcHBlciBmcm9tICcuL1Byb2dyZXNzV3JhcHBlcidcbmltcG9ydCBQcm9ncmVzc0N0eCBmcm9tICcuLy4uL2NvbnRleHQvUHJvZ3Jlc3MnXG5cbmV4cG9ydCBkZWZhdWx0IChwcm9wczogUHJvZ3Jlc3NQcm9wcykgPT4ge1xuICAgIGNvbnN0IHsgYnVmZmVyQWN0aW9uLCBwYXVzZSwgaXNTdGF0aWMgfSA9IHVzZUNvbnRleHQ8UHJvZ3Jlc3NDb250ZXh0PihQcm9ncmVzc0N0eClcblxuICAgIGNvbnN0IGdldFByb2dyZXNzU3R5bGUgPSAoeyBhY3RpdmUgfSkgPT4ge1xuICAgICAgICBzd2l0Y2ggKGFjdGl2ZSkge1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIHJldHVybiB7IHdpZHRoOiAnMTAwJScgfVxuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJldHVybiB7IHRyYW5zZm9ybTogYHNjYWxlWCgke3Byb3BzLmNvdW50IC8gMTAwfSlgIH1cbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICByZXR1cm4geyB3aWR0aDogMCB9XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB7IHdpZHRoOiAwIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHsgd2lkdGgsIGFjdGl2ZSB9ID0gcHJvcHNcbiAgICByZXR1cm4gKFxuICAgICAgICA8UHJvZ3Jlc3NXcmFwcGVyIHdpZHRoPXt3aWR0aH0gcGF1c2U9e3BhdXNlfSBidWZmZXJBY3Rpb249e2J1ZmZlckFjdGlvbn0gaXNTdGF0aWM9e2lzU3RhdGljfT5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBzdHlsZT17eyAuLi5nZXRQcm9ncmVzc1N0eWxlKHsgYWN0aXZlIH0pLCAuLi5zdHlsZXMuaW5uZXIgfX0gLz5cbiAgICAgICAgPC9Qcm9ncmVzc1dyYXBwZXI+XG4gICAgKVxufVxuXG5jb25zdCBzdHlsZXM6IGFueSA9IHtcbiAgICBpbm5lcjoge1xuICAgICAgICBiYWNrZ3JvdW5kOiAnI2ZmZicsXG4gICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICBtYXhXaWR0aDogJzEwMCUnLFxuICAgICAgICBib3JkZXJSYWRpdXM6IDIsXG4gICAgICAgIHRyYW5zZm9ybU9yaWdpbjogJ2NlbnRlciBsZWZ0JyxcblxuICAgICAgICBXZWJraXRCYWNrZmFjZVZpc2liaWxpdHk6ICdoaWRkZW4nLFxuICAgICAgICBNb3pCYWNrZmFjZVZpc2liaWxpdHk6ICdoaWRkZW4nLFxuICAgICAgICBtc0JhY2tmYWNlVmlzaWJpbGl0eTogJ2hpZGRlbicsXG4gICAgICAgIGJhY2tmYWNlVmlzaWJpbGl0eTogJ2hpZGRlbicsXG5cbiAgICAgICAgV2Via2l0UGVyc3BlY3RpdmU6IDEwMDAsXG4gICAgICAgIE1velBlcnNwZWN0aXZlOiAxMDAwLFxuICAgICAgICBtc1BlcnNwZWN0aXZlOiAxMDAwLFxuICAgICAgICBwZXJzcGVjdGl2ZTogMTAwMFxuICAgIH1cbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBQcm9ncmVzc1dyYXBwZXJQcm9wcyB9IGZyb20gJy4vLi4vaW50ZXJmYWNlcydcblxuY29uc3QgUHJvZ3Jlc3NXcmFwcGVyID0gKHByb3BzOiBQcm9ncmVzc1dyYXBwZXJQcm9wcykgPT4gKFxuICAgIDxkaXYgc3R5bGU9e3sgLi4uc3R5bGVzLnByb2dyZXNzLCAuLi5nZXRQcm9ncmVzc1dyYXBwZXJTdHlsZShwcm9wcykgfX0+XG4gICAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICA8L2Rpdj5cbilcblxuY29uc3QgZ2V0UHJvZ3Jlc3NXcmFwcGVyU3R5bGUgPSAoeyB3aWR0aCwgcGF1c2UsIGJ1ZmZlckFjdGlvbiwgaXNTdGF0aWMgfSkgPT4gKHtcbiAgICB3aWR0aDogYCR7d2lkdGggKiAxMDB9JWAsXG4gICAgb3BhY2l0eTogcGF1c2UgJiYgIWJ1ZmZlckFjdGlvbiAmJiAhaXNTdGF0aWMgPyAwIDogMVxufSlcblxuY29uc3Qgc3R5bGVzID0ge1xuICAgIHByb2dyZXNzOiB7XG4gICAgICAgIGhlaWdodDogMixcbiAgICAgICAgbWF4V2lkdGg6ICcxMDAlJyxcbiAgICAgICAgYmFja2dyb3VuZDogJyM1NTUnLFxuICAgICAgICBtYXJnaW46IDIsXG4gICAgICAgIGJvcmRlclJhZGl1czogMixcbiAgICAgICAgdHJhbnNpdGlvbjogJ29wYWNpdHkgNDAwbXMgZWFzZS1pbi1vdXQnXG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQcm9ncmVzc1dyYXBwZXIiLCJpbXBvcnQgeyBSZW5kZXJlciwgU3RvcnksIFRlc3RlciB9IGZyb20gXCIuLi9pbnRlcmZhY2VzXCI7XG5cbmV4cG9ydCBjb25zdCBnZXRSZW5kZXJlciA9IChzdG9yeTogU3RvcnksIHJlbmRlcmVyczogeyByZW5kZXJlcjogUmVuZGVyZXIsIHRlc3RlcjogVGVzdGVyIH1bXSk6IFJlbmRlcmVyID0+IHtcbiAgICBsZXQgcHJvYmFibGUgPSByZW5kZXJlcnMubWFwKHIgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4ucixcbiAgICAgICAgICAgIHRlc3RlclJlc3VsdDogci50ZXN0ZXIoc3RvcnkpXG4gICAgICAgIH1cbiAgICB9KS5maWx0ZXIociA9PiByLnRlc3RlclJlc3VsdC5jb25kaXRpb24pO1xuICAgIHByb2JhYmxlLnNvcnQoKGEsIGIpID0+IGIudGVzdGVyUmVzdWx0LnByaW9yaXR5IC0gYS50ZXN0ZXJSZXN1bHQucHJpb3JpdHkpO1xuICAgIHJldHVybiBwcm9iYWJsZVswXS5yZW5kZXJlcjtcbn0iLCJpbXBvcnQgaW1hZ2UgZnJvbSAnLi9JbWFnZSc7XG5pbXBvcnQgdmlkZW8gZnJvbSAnLi9WaWRlbyc7XG5pbXBvcnQgZGVmYXVsdFJlbmRlcmVyIGZyb20gJy4vRGVmYXVsdCc7XG5pbXBvcnQgYXV0b3BsYXlDb250ZW50IGZyb20gJy4vQXV0b1BsYXlDb250ZW50JztcblxuZXhwb3J0IGNvbnN0IHJlbmRlcmVycyA9IFtpbWFnZSwgdmlkZW8sIGF1dG9wbGF5Q29udGVudCwgZGVmYXVsdFJlbmRlcmVyXTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBTcGlubmVyIGZyb20gJy4uL2NvbXBvbmVudHMvU3Bpbm5lcic7XG5pbXBvcnQgeyBSZW5kZXJlciwgVGVzdGVyIH0gZnJvbSAnLi8uLi9pbnRlcmZhY2VzJztcbmltcG9ydCBXaXRoSGVhZGVyIGZyb20gJy4vd3JhcHBlcnMvd2l0aEhlYWRlcic7XG5pbXBvcnQgV2l0aFNlZU1vcmUgZnJvbSAnLi93cmFwcGVycy93aXRoU2VlTW9yZSc7XG5cbmV4cG9ydCBjb25zdCByZW5kZXJlcjogUmVuZGVyZXIgPSAoeyBzdG9yeSwgYWN0aW9uLCBpc1BhdXNlZCwgY29uZmlnIH0pID0+IHtcbiAgICBjb25zdCBbbG9hZGVkLCBzZXRMb2FkZWRdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCwgbG9hZGVyLCBzdG9yeVN0eWxlcyB9ID0gY29uZmlnO1xuICAgIGxldCBjb21wdXRlZFN0eWxlcyA9IHtcbiAgICAgICAgLi4uc3R5bGVzLnN0b3J5Q29udGVudCxcbiAgICAgICAgLi4uKHN0b3J5U3R5bGVzIHx8IHt9KVxuICAgIH1cblxuICAgIGNvbnN0IGltYWdlTG9hZGVkID0gKCkgPT4ge1xuICAgICAgICBzZXRMb2FkZWQodHJ1ZSk7XG4gICAgICAgIGFjdGlvbigncGxheScpO1xuICAgIH1cblxuICAgIHJldHVybiA8V2l0aEhlYWRlciBzdG9yeT17c3Rvcnl9IGdsb2JhbEhlYWRlcj17Y29uZmlnLmhlYWRlcn0+XG4gICAgICAgIDxXaXRoU2VlTW9yZSBzdG9yeT17c3Rvcnl9IGFjdGlvbj17YWN0aW9ufT5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGltZyBzdHlsZT17Y29tcHV0ZWRTdHlsZXN9IHNyYz17c3RvcnkudXJsfSBvbkxvYWQ9e2ltYWdlTG9hZGVkfSAvPlxuICAgICAgICAgICAgICAgIHshbG9hZGVkICYmIChcbiAgICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBcInJnYmEoMCwgMCwgMCwgMC45KVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpJbmRleDogOSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBcIiNjY2NcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAge2xvYWRlciB8fCA8U3Bpbm5lciAvPn1cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L1dpdGhTZWVNb3JlPlxuICAgIDwvV2l0aEhlYWRlcj5cbn1cblxuY29uc3Qgc3R5bGVzID0ge1xuICAgIHN0b3J5OiB7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgICAgICBvdmVyZmxvdzogXCJoaWRkZW5cIlxuICAgIH0sXG4gICAgc3RvcnlDb250ZW50OiB7XG4gICAgICAgIHdpZHRoOiBcImF1dG9cIixcbiAgICAgICAgbWF4V2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICBtYXhIZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgICBtYXJnaW46IFwiYXV0b1wiXG4gICAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHRlc3RlcjogVGVzdGVyID0gKHN0b3J5KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29uZGl0aW9uOiAhc3RvcnkuY29udGVudCAmJiAoIXN0b3J5LnR5cGUgfHwgc3RvcnkudHlwZSA9PT0gJ2ltYWdlJyksXG4gICAgICAgIHByaW9yaXR5OiAyXG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgcmVuZGVyZXIsXG4gICAgdGVzdGVyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuZXhwb3J0IGRlZmF1bHQgKCh7XG4gIHN0eWxlcyA9IHt9LFxuICAuLi5wcm9wc1xufSkgPT4gPHN2ZyB3aWR0aD1cIjQ0XCIgaGVpZ2h0PVwiNDRcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgc3Ryb2tlPVwiI2ZmZlwiIHsuLi5wcm9wc30+PGcgZmlsbD1cIm5vbmVcIiBmaWxsUnVsZT1cImV2ZW5vZGRcIiBzdHJva2VXaWR0aD1cIjJcIj48Y2lyY2xlIGN4PVwiMjJcIiBjeT1cIjIyXCIgcj1cIjFcIj48YW5pbWF0ZSBhdHRyaWJ1dGVOYW1lPVwiclwiIGJlZ2luPVwiMHNcIiBkdXI9XCIxLjhzXCIgdmFsdWVzPVwiMTsgMjBcIiBjYWxjTW9kZT1cInNwbGluZVwiIGtleVRpbWVzPVwiMDsgMVwiIGtleVNwbGluZXM9XCIwLjE2NSwgMC44NCwgMC40NCwgMVwiIHJlcGVhdENvdW50PVwiaW5kZWZpbml0ZVwiIC8+PGFuaW1hdGUgYXR0cmlidXRlTmFtZT1cInN0cm9rZS1vcGFjaXR5XCIgYmVnaW49XCIwc1wiIGR1cj1cIjEuOHNcIiB2YWx1ZXM9XCIxOyAwXCIgY2FsY01vZGU9XCJzcGxpbmVcIiBrZXlUaW1lcz1cIjA7IDFcIiBrZXlTcGxpbmVzPVwiMC4zLCAwLjYxLCAwLjM1NSwgMVwiIHJlcGVhdENvdW50PVwiaW5kZWZpbml0ZVwiIC8+PC9jaXJjbGU+PGNpcmNsZSBjeD1cIjIyXCIgY3k9XCIyMlwiIHI9XCIxXCI+PGFuaW1hdGUgYXR0cmlidXRlTmFtZT1cInJcIiBiZWdpbj1cIi0wLjlzXCIgZHVyPVwiMS44c1wiIHZhbHVlcz1cIjE7IDIwXCIgY2FsY01vZGU9XCJzcGxpbmVcIiBrZXlUaW1lcz1cIjA7IDFcIiBrZXlTcGxpbmVzPVwiMC4xNjUsIDAuODQsIDAuNDQsIDFcIiByZXBlYXRDb3VudD1cImluZGVmaW5pdGVcIiAvPjxhbmltYXRlIGF0dHJpYnV0ZU5hbWU9XCJzdHJva2Utb3BhY2l0eVwiIGJlZ2luPVwiLTAuOXNcIiBkdXI9XCIxLjhzXCIgdmFsdWVzPVwiMTsgMFwiIGNhbGNNb2RlPVwic3BsaW5lXCIga2V5VGltZXM9XCIwOyAxXCIga2V5U3BsaW5lcz1cIjAuMywgMC42MSwgMC4zNTUsIDFcIiByZXBlYXRDb3VudD1cImluZGVmaW5pdGVcIiAvPjwvY2lyY2xlPjwvZz48L3N2Zz4pOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IEhlYWRlclByb3BzIH0gZnJvbSAnLi8uLi9pbnRlcmZhY2VzJ1xuXG5jb25zdCBIZWFkZXIgPSAoeyBwcm9maWxlSW1hZ2UsIGhlYWRpbmcsIHN1YmhlYWRpbmcgfTogSGVhZGVyUHJvcHMpID0+XG4gICAgPGRpdiBzdHlsZT17c3R5bGVzLm1haW59PlxuICAgICAgICB7cHJvZmlsZUltYWdlICYmIDxpbWcgc3R5bGU9e3N0eWxlcy5pbWd9IHNyYz17cHJvZmlsZUltYWdlfSAvPn1cbiAgICAgICAgPHNwYW4gc3R5bGU9e3N0eWxlcy50ZXh0fT5cbiAgICAgICAgICAgIDxwIHN0eWxlPXtzdHlsZXMuaGVhZGluZ30+e2hlYWRpbmd9PC9wPlxuICAgICAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy5zdWJoZWFkaW5nfT57c3ViaGVhZGluZ308L3A+XG4gICAgICAgIDwvc3Bhbj5cbiAgICA8L2Rpdj5cblxuY29uc3Qgc3R5bGVzID0ge1xuICAgIG1haW46IHtcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJ1xuICAgIH0sXG4gICAgaW1nOiB7XG4gICAgICAgIHdpZHRoOiA0MCxcbiAgICAgICAgaGVpZ2h0OiA0MCxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiA0MCxcbiAgICAgICAgbWFyZ2luUmlnaHQ6IDEwLFxuICAgICAgICBmaWx0ZXI6ICdkcm9wLXNoYWRvdygwIDBweCAycHggcmdiYSgwLCAwLCAwLCAwLjUpKScsXG4gICAgICAgIGJvcmRlcjogJzJweCBzb2xpZCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOCknXG4gICAgfSxcbiAgICB0ZXh0OiB7XG4gICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgIGZpbHRlcjogJ2Ryb3Atc2hhZG93KDAgMHB4IDNweCByZ2JhKDAsIDAsIDAsIDAuOSkpJ1xuICAgIH0sXG4gICAgaGVhZGluZzoge1xuICAgICAgICBmb250U2l6ZTogJzFyZW0nLFxuICAgICAgICBjb2xvcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC45KScsXG4gICAgICAgIG1hcmdpbjogMCxcbiAgICAgICAgbWFyZ2luQm90dG9tOiAyXG4gICAgfSxcbiAgICBzdWJoZWFkaW5nOiB7XG4gICAgICAgIGZvbnRTaXplOiAnMC42cmVtJyxcbiAgICAgICAgY29sb3I6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOCknLFxuICAgICAgICBtYXJnaW46IDBcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEhlYWRlciIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBHbG9iYWxDb250ZXh0IGZyb20gJy4vLi4vY29udGV4dC9HbG9iYWwnXG5pbXBvcnQgeyBHbG9iYWxDdHggfSBmcm9tICcuLy4uL2ludGVyZmFjZXMnXG5pbXBvcnQgeyBTZWVNb3JlUHJvcHMgfSBmcm9tICcuLy4uL2ludGVyZmFjZXMnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNlZU1vcmUocHJvcHM6IFNlZU1vcmVQcm9wcykge1xuICAgIGNvbnN0IFNlZU1vcmVDb250ZW50ID0gcHJvcHMuc2VlTW9yZUNvbnRlbnQ7XG4gICAgY29uc3QgQ3VzdG9tQ29sbGFwc2VkID0gcHJvcHMuY3VzdG9tQ29sbGFwc2VkO1xuXG4gICAgY29uc3QgeyBrZXlib2FyZE5hdmlnYXRpb24gfSA9IHVzZUNvbnRleHQ8R2xvYmFsQ3R4PihHbG9iYWxDb250ZXh0KTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IGlzQ2xpZW50ID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCk7XG4gICAgICAgIGlmIChpc0NsaWVudCAmJiAodHlwZW9mIGtleWJvYXJkTmF2aWdhdGlvbiA9PT0gJ2Jvb2xlYW4nICYmIGtleWJvYXJkTmF2aWdhdGlvbikpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGhhbmRsZUtleURvd24pO1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBoYW5kbGVLZXlEb3duKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIFtrZXlib2FyZE5hdmlnYXRpb25dKVxuXG4gICAgY29uc3QgaGFuZGxlS2V5RG93biA9IChlOiBLZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChlLmtleSA9PT0gJ0Fycm93VXAnKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICAgIHByb3BzLnRvZ2dsZU1vcmUodHJ1ZSlcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChlLmtleSA9PT0gJ0Fycm93RG93bicgfHwgZS5rZXkgPT09ICdFc2NhcGUnKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICAgIHByb3BzLnRvZ2dsZU1vcmUoZmFsc2UpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICBwcm9wcy5zaG93Q29udGVudFxuICAgICAgICAgICAgPyA8ZGl2IHN0eWxlPXtzdHlsZXMuc2VlTW9yZUV4cGFuZGVkfT5cbiAgICAgICAgICAgICAgICA8U2VlTW9yZUNvbnRlbnQgY2xvc2U9eygpID0+IHByb3BzLnRvZ2dsZU1vcmUoZmFsc2UpfSAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA6XG4gICAgICAgICAgICAoQ3VzdG9tQ29sbGFwc2VkID8gPEN1c3RvbUNvbGxhcHNlZCBhY3Rpb249e3Byb3BzLmFjdGlvbn0gdG9nZ2xlTW9yZT17cHJvcHMudG9nZ2xlTW9yZX0gLz4gOiA8ZGl2IHN0eWxlPXtzdHlsZXMuc2VlTW9yZX0gb25DbGljaz17KGUpID0+IHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBwcm9wcy50b2dnbGVNb3JlKHRydWUpXG4gICAgICAgICAgICB9fSA+XG4gICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9e3N0eWxlcy5zZWVNb3JlSWNvbn0+4oyDPC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPXtzdHlsZXMuc2VlTW9yZVRleHR9PlNlZSBtb3JlPC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApXG4gICAgKVxufVxuXG5jb25zdCBzdHlsZXM6IGFueSA9IHtcbiAgICBzZWVNb3JlOiB7XG4gICAgICAgIGhlaWdodDogXCIxMHZoXCIsXG4gICAgICAgIGJhY2tncm91bmQ6IFwibGluZWFyLWdyYWRpZW50KHJnYmEoMCwgMCwgMCwgMCksIHJnYmEoMCwgMCwgMCwgMC4yKSlcIixcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6IFwiZmxleC1lbmRcIixcbiAgICAgICAgYm90dG9tOiAwXG4gICAgfSxcbiAgICBzZWVNb3JlRXhwYW5kZWQ6IHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgICB6SW5kZXg6IDk5OTk5XG4gICAgfSxcbiAgICBzZWVNb3JlVGV4dDoge1xuICAgICAgICBjb2xvcjogXCJ3aGl0ZVwiLFxuICAgICAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXG4gICAgICAgIGxldHRlclNwYWNpbmc6IFwiMC4xZW1cIixcbiAgICAgICAgbWFyZ2luQm90dG9tOiBcIjIuMnZoXCIsXG4gICAgICAgIHRleHRUcmFuc2Zvcm06IFwiY2FwaXRhbGl6ZVwiLFxuICAgICAgICBvcGFjaXR5OiBcIjFcIixcbiAgICAgICAgZm9udFNpemU6IFwiMC44ZW1cIixcbiAgICAgICAgdHJhbnNpdGlvbjogXCJvcGFjaXR5IDMwMG1zIGVhc2UtaW4tb3V0XCJcbiAgICB9LFxuICAgIHNlZU1vcmVJY29uOiB7XG4gICAgICAgIGNvbG9yOiBcIndoaXRlXCIsXG4gICAgICAgIHRleHRBbGlnbjogXCJjZW50ZXJcIixcbiAgICAgICAgbGV0dGVyU3BhY2luZzogXCIwLjJlbVwiLFxuICAgICAgICBtYXJnaW5Cb3R0b206IFwiMC40dmhcIixcbiAgICAgICAgb3BhY2l0eTogXCIxXCIsXG4gICAgICAgIGZpbHRlcjogXCJkcm9wLXNoYWRvdygwIDAgNXB4IGJsYWNrKVwiLFxuICAgICAgICB0ZXh0VHJhbnNmb3JtOiBcImNhcGl0YWxpemVcIixcbiAgICAgICAgdHJhbnNpdGlvbjogXCJvcGFjaXR5IDMwMG1zIGVhc2UtaW4tb3V0XCJcbiAgICB9LFxuICAgIHNlZU1vcmVDbG9zZToge1xuICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICBmaWx0ZXI6IFwiZHJvcC1zaGFkb3coMCAzcHggMnB4ICNjY2MpXCIsXG4gICAgICAgIHJpZ2h0OiBcIjAuNXJlbVwiLFxuICAgICAgICB0b3A6IFwiMC41cmVtXCIsXG4gICAgICAgIGZvbnRTaXplOiBcIjEuNXJlbVwiLFxuICAgICAgICBvcGFjaXR5OiBcIjAuN1wiLFxuICAgICAgICBwYWRkaW5nOiBcIjFyZW1cIlxuICAgIH1cbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgU3Bpbm5lciBmcm9tICcuLi9jb21wb25lbnRzL1NwaW5uZXInO1xuaW1wb3J0IHsgUmVuZGVyZXIsIFRlc3RlciB9IGZyb20gJy4vLi4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgV2l0aEhlYWRlciBmcm9tICcuL3dyYXBwZXJzL3dpdGhIZWFkZXInO1xuaW1wb3J0IFdpdGhTZWVNb3JlIGZyb20gJy4vd3JhcHBlcnMvd2l0aFNlZU1vcmUnO1xuXG5leHBvcnQgY29uc3QgcmVuZGVyZXI6IFJlbmRlcmVyID0gKHsgc3RvcnksIGFjdGlvbiwgaXNQYXVzZWQsIGNvbmZpZywgbWVzc2FnZUhhbmRsZXIgfSkgPT4ge1xuICAgIGNvbnN0IFtsb2FkZWQsIHNldExvYWRlZF0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgW211dGVkLCBzZXRNdXRlZF0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0LCBsb2FkZXIsIHN0b3J5U3R5bGVzIH0gPSBjb25maWc7XG5cbiAgICBsZXQgY29tcHV0ZWRTdHlsZXMgPSB7XG4gICAgICAgIC4uLnN0eWxlcy5zdG9yeUNvbnRlbnQsXG4gICAgICAgIC4uLihzdG9yeVN0eWxlcyB8fCB7fSlcbiAgICB9XG5cbiAgICBsZXQgdmlkID0gUmVhY3QudXNlUmVmPEhUTUxWaWRlb0VsZW1lbnQ+KG51bGwpO1xuXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKHZpZC5jdXJyZW50KSB7XG4gICAgICAgICAgICBpZiAoaXNQYXVzZWQpIHtcbiAgICAgICAgICAgICAgICB2aWQuY3VycmVudC5wYXVzZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2aWQuY3VycmVudC5wbGF5KCkuY2F0Y2goKCkgPT4geyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIFtpc1BhdXNlZF0pO1xuXG4gICAgY29uc3Qgb25XYWl0aW5nID0gKCkgPT4ge1xuICAgICAgICBhY3Rpb24oXCJwYXVzZVwiLCB0cnVlKTtcbiAgICB9XG5cbiAgICBjb25zdCBvblBsYXlpbmcgPSAoKSA9PiB7XG4gICAgICAgIGFjdGlvbihcInBsYXlcIiwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgY29uc3QgdmlkZW9Mb2FkZWQgPSAoKSA9PiB7XG4gICAgICAgIG1lc3NhZ2VIYW5kbGVyKCdVUERBVEVfVklERU9fRFVSQVRJT04nLCB7IGR1cmF0aW9uOiB2aWQuY3VycmVudC5kdXJhdGlvbiB9KTtcbiAgICAgICAgc2V0TG9hZGVkKHRydWUpO1xuICAgICAgICB2aWQuY3VycmVudC5wbGF5KCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBhY3Rpb24oJ3BsYXknKTtcbiAgICAgICAgfSkuY2F0Y2goKCkgPT4ge1xuICAgICAgICAgICAgc2V0TXV0ZWQodHJ1ZSk7XG4gICAgICAgICAgICB2aWQuY3VycmVudC5wbGF5KCkuZmluYWxseSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgYWN0aW9uKCdwbGF5Jyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gPFdpdGhIZWFkZXIgc3Rvcnk9e3N0b3J5fSBnbG9iYWxIZWFkZXI9e2NvbmZpZy5oZWFkZXJ9PlxuICAgICAgICA8V2l0aFNlZU1vcmUgc3Rvcnk9e3N0b3J5fSBhY3Rpb249e2FjdGlvbn0+XG4gICAgICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMudmlkZW9Db250YWluZXJ9PlxuICAgICAgICAgICAgICAgIDx2aWRlb1xuICAgICAgICAgICAgICAgICAgICByZWY9e3ZpZH1cbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e2NvbXB1dGVkU3R5bGVzfVxuICAgICAgICAgICAgICAgICAgICBzcmM9e3N0b3J5LnVybH1cbiAgICAgICAgICAgICAgICAgICAgY29udHJvbHM9e2ZhbHNlfVxuICAgICAgICAgICAgICAgICAgICBvbkxvYWRlZERhdGE9e3ZpZGVvTG9hZGVkfVxuICAgICAgICAgICAgICAgICAgICBwbGF5c0lubGluZVxuICAgICAgICAgICAgICAgICAgICBvbldhaXRpbmc9e29uV2FpdGluZ31cbiAgICAgICAgICAgICAgICAgICAgb25QbGF5aW5nPXtvblBsYXlpbmd9XG4gICAgICAgICAgICAgICAgICAgIG11dGVkPXttdXRlZH1cbiAgICAgICAgICAgICAgICAgICAgYXV0b1BsYXlcbiAgICAgICAgICAgICAgICAgICAgd2Via2l0LXBsYXlzaW5saW5lPVwidHJ1ZVwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICB7IWxvYWRlZCAmJiAoXG4gICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogXCJyZ2JhKDAsIDAsIDAsIDAuOSlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB6SW5kZXg6IDksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogXCIjY2NjXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtsb2FkZXIgfHwgPFNwaW5uZXIgLz59XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9XaXRoU2VlTW9yZT5cbiAgICA8L1dpdGhIZWFkZXI+XG59XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgICBzdG9yeUNvbnRlbnQ6IHtcbiAgICAgICAgd2lkdGg6IFwiYXV0b1wiLFxuICAgICAgICBtYXhXaWR0aDogXCIxMDAlXCIsXG4gICAgICAgIG1heEhlaWdodDogXCIxMDAlXCIsXG4gICAgICAgIG1hcmdpbjogXCJhdXRvXCJcbiAgICB9LFxuICAgIHZpZGVvQ29udGFpbmVyOiB7XG4gICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJ1xuICAgIH1cbn07XG5cbmV4cG9ydCBjb25zdCB0ZXN0ZXI6IFRlc3RlciA9IChzdG9yeSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIGNvbmRpdGlvbjogc3RvcnkudHlwZSA9PT0gJ3ZpZGVvJyxcbiAgICAgICAgcHJpb3JpdHk6IDJcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICByZW5kZXJlcixcbiAgICB0ZXN0ZXJcbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFJlbmRlcmVyLCBUZXN0ZXIgfSBmcm9tICcuLy4uL2ludGVyZmFjZXMnO1xuXG5leHBvcnQgY29uc3QgcmVuZGVyZXI6IFJlbmRlcmVyID0gKHsgc3RvcnksIGFjdGlvbiB9KSA9PiB7XG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgYWN0aW9uKCdwbGF5Jyk7XG4gICAgfSwgW3N0b3J5XSlcblxuICAgIHJldHVybiA8ZGl2IHN0eWxlPXtzdHlsZXMuc3RvcnlDb250ZW50fT5cbiAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy50ZXh0fT5UaGlzIHN0b3J5IGNvdWxkIG5vdCBiZSBsb2FkZWQuPC9wPlxuICAgIDwvZGl2PlxufVxuXG5jb25zdCBzdHlsZXMgPSB7XG4gICAgc3RvcnlDb250ZW50OiB7XG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgbWF4SGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgICAgbWFyZ2luOiBcImF1dG9cIlxuICAgIH0sXG4gICAgdGV4dDoge1xuICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgICBjb2xvcjogJ3doaXRlJyxcbiAgICAgICAgd2lkdGg6ICc5MCUnLFxuICAgICAgICBtYXJnaW46ICdhdXRvJ1xuICAgIH1cbn07XG5cbmV4cG9ydCBjb25zdCB0ZXN0ZXI6IFRlc3RlciA9ICgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICBjb25kaXRpb246IHRydWUsXG4gICAgICAgIHByaW9yaXR5OiAxXG4gICAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIHJlbmRlcmVyLFxuICAgIHRlc3RlclxufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFJlbmRlcmVyLCBUZXN0ZXIgfSBmcm9tICcuLy4uL2ludGVyZmFjZXMnO1xuXG5leHBvcnQgY29uc3QgcmVuZGVyZXI6IFJlbmRlcmVyID0gKHByb3BzKSA9PiB7XG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgcHJvcHMuYWN0aW9uKCdwbGF5Jyk7XG4gICAgfSwgW3Byb3BzLnN0b3J5XSlcbiAgICBjb25zdCBDb250ZW50ID0gcHJvcHMuc3Rvcnkub3JpZ2luYWxDb250ZW50O1xuICAgIHJldHVybiA8Q29udGVudCB7Li4ucHJvcHN9IC8+XG59XG5cbmV4cG9ydCBjb25zdCB0ZXN0ZXI6IFRlc3RlciA9IChzdG9yeSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIGNvbmRpdGlvbjogISFzdG9yeS5jb250ZW50LFxuICAgICAgICBwcmlvcml0eTogMlxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIHJlbmRlcmVyLFxuICAgIHRlc3RlclxufSJdLCJzb3VyY2VSb290IjoiIn0=